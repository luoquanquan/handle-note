<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>隐藏滚动条</title>
    <url>/handle-note/2020/02/05/CSS/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<p>使用纯 CSS 实现隐藏滚动条, 内容比较少直接放代码链接了:</p>
<p><a href="https://github.com/luoquanquan/learn-fe/blob/master/hidden-scroll-bar/readMe.md" target="_blank" rel="noopener">Reference</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>历史版本浏览器下载</title>
    <url>/handle-note/2020/02/05/tips/%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="历史版本浏览器-用于-debug"><a href="#历史版本浏览器-用于-debug" class="headerlink" title="历史版本浏览器, 用于 debug"></a>历史版本浏览器, 用于 debug</h2><ul>
<li><a href="https://www.chromedownloads.net/" target="_blank" rel="noopener">Chrome</a></li>
<li><a href="http://ftp.mozilla.org/pub/firefox/releases/" target="_blank" rel="noopener">Fire Fox</a></li>
</ul>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>parseInt vs Math.floor</title>
    <url>/handle-note/2020/02/04/basic-js/parseInt-vs-Math-floor/</url>
    <content><![CDATA[<blockquote>
<p>parseInt 和 Math.floor 都可以实现取整, 但是处理的方式存在差别</p>
</blockquote>
<h2 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h2><p>parseInt(string, radix) 将一个字符串 string 转换为 radix 进制的整数, radix 为介于 2 - 36 之间的整数</p>
<p>其中</p>
<p>string: 是要被解析的字符串, 如果传入的值不是一个字符串则会将其转化成字符串(toString 方法), 字符串开头结尾的空白字符会被忽略</p>
<p>radix: 一个介于 2 - 36 的整数, 表示的是上述字符串的基数. 默认值是 10, 如果传入的 radix 小于 2 或者大于 36 则返回 NaN</p>
<ul>
<li>可以处理数字(调用数字的 toString 方法将其转化成字符串)<ul>
<li>parseInt(1.1) -&gt; 1</li>
<li>parseInt(1.9) -&gt; 1</li>
<li>parseInt(0.9) -&gt; 0</li>
<li>parseInt(-1.9) -&gt; -1</li>
</ul>
</li>
<li>可以处理 <font color="red">数字开头的字符串</font><ul>
<li>parseInt(‘-1’) -&gt; -1</li>
<li>parseInt(‘10px’) -&gt; 10</li>
<li>…</li>
</ul>
</li>
<li>可以把 2 - 36 进制的数转为 10 进制<ul>
<li>parseInt(11, 2) -&gt; 3</li>
<li>parseInt(11, 8) -&gt; 9</li>
<li>parseInt(11, 10) -&gt; 11</li>
<li>parseInt(11, 16) -&gt; 17</li>
<li>parseInt(11, 36) -&gt; 37</li>
<li>…</li>
</ul>
</li>
</ul>
<h2 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor"></a>Math.floor</h2><p>Math.floor(x) ===  向下取整, 返回小于或者等于给定数字的最大整数</p>
<p>其中 x 是需要解析的数字</p>
<ul>
<li>Math.floor(1.2) -&gt; 1</li>
<li>Math.floor(1.9) -&gt; 1</li>
<li><font color="red">Math.floor(-1.2) -&gt; -2</font> 真正的向下取整</li>
<li>Math.floor(‘1.9’) -&gt; 1 也可以处理字符串(不建议用)</li>
</ul>
<h2 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h2><p>parseFloat(x) 函数可解析一个字符串, 并返回一个浮点数</p>
<p>其中 x 是需要解析的字符串</p>
<p>parseFloat 将它的字符串参数解析成为浮点数并返回. 如果在解析过程中遇到了正负号 (+ 或 -) 数字 (0-9) 小数点, 或者科学记数法中的指数 (e 或 E) 以外的字符, 则它会忽略该字符以及之后的所有字符, 返回当前已经解析到的浮点数. 同时参数字符串首位的空白符会被忽略</p>
<p>PS: 如果字符串的第一个字符不能被转换为数字, 那么 parseFloat() 会返回 NaN.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Number</tag>
      </tags>
  </entry>
  <entry>
    <title>9 种方式实现数组去重</title>
    <url>/handle-note/2020/02/04/basic-js/9%20%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<blockquote>
<p>业务需求跟的太久了, 回首技术真的落后好多. 即将而立之年, 重拾基础. 不知该感到荣幸还是有点酸楚</p>
</blockquote>
<h2 id="方法一-两层循环-通过标记判断是否更新结果数组"><a href="#方法一-两层循环-通过标记判断是否更新结果数组" class="headerlink" title="方法一, 两层循环, 通过标记判断是否更新结果数组"></a>方法一, 两层循环, 通过标记判断是否更新结果数组</h2><ul>
<li>定义 ret = [] 用于存放结果数组</li>
<li>定义 repeat 变量作为当前元素是否存在的标记值, 并默认赋值为 false</li>
<li>外层循环, 遍历原数组中的每一个元素, 遍历前先把 repeat 置为 false 假设当前元素没有未在结果数组中出现</li>
<li>内层循环, 遍历当前的结果数组. 如果当前的结果数组中已经包含了外层循环中遍历的元素, 标记 repeat 为 ture</li>
<li>判断 repeat 的值, 如果当前元素没有存在于结果数组中, 则向结果数组中添加当前值</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/57d583c49d8d6119976659fe3bf9f456a899a706" target="_blank" rel="noopener">地址</a></p>
<p>通过 github 上的评论可以看到当前提交的代码有 bug, 修改的代码为<a href="https://github.com/luoquanquan/learn-fe/commit/8a0fc3ae271c2f703d21f2ac281d961dfbeea1c7" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法二-先给数组排序-在逐个比较"><a href="#方法二-先给数组排序-在逐个比较" class="headerlink" title="方法二, 先给数组排序, 在逐个比较"></a>方法二, 先给数组排序, 在逐个比较</h2><ul>
<li>定义 ret = [] 用于存放结果数组</li>
<li>备份原数组并对备份的数组进行排序</li>
<li>启动循环, 一次对比当前元素和结果数组中的最后一个元素, 相等则跳过, 不相等加入结果数组</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/c69aabd43dc0dc0166f1d7cbbaba17579acb89b2" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法三-利用对象的属性不能重复的特性"><a href="#方法三-利用对象的属性不能重复的特性" class="headerlink" title="方法三, 利用对象的属性不能重复的特性"></a>方法三, 利用对象的属性不能重复的特性</h2><ul>
<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>
<li>创建结果数组</li>
<li>遍历原数组, 把各个值当做对象的 key 存入对象, 如果对象的 key 出现重复值后边的会直接覆盖掉前边的</li>
<li>遍历对象, 并把所有的 key 作为元素 push 到结果数组中</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/1f04c7391ca27c7c1ac6d9a0f09551cf19925614" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法四-还是利用对象的属性不能重复的特性"><a href="#方法四-还是利用对象的属性不能重复的特性" class="headerlink" title="方法四, 还是利用对象的属性不能重复的特性"></a>方法四, 还是利用对象的属性不能重复的特性</h2><ul>
<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>
<li>创建结果数组</li>
<li>遍历原数组, 判断对象是否已经存在当前 item 为 key 的成员, 如果有说明之前的遍历中出现过该值-跳过, 如果没有对象中添加对应的属性同时给结果数组中添加相应的值</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/0f50bab95474fadf6d828c90f70c7bc0fa5f5764" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法五-找到一个元素看他的后边还有没有和他一样的元素"><a href="#方法五-找到一个元素看他的后边还有没有和他一样的元素" class="headerlink" title="方法五, 找到一个元素看他的后边还有没有和他一样的元素"></a>方法五, 找到一个元素看他的后边还有没有和他一样的元素</h2><ul>
<li>备份原数组, 并作为结果数组</li>
<li>遍历备份的数组</li>
<li>取出当前的元素</li>
<li>遍历当前元素到数组的结尾, 如果有和当前元素相等的元素则 splice 掉</li>
<li>len– 因为删除了一个元素故数组的长度减一</li>
<li>j– 因为和当前元素相等的后位元素已经被删除, 之后的元素迁移, 所以需要 j– 修正内部遍历的索引值</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/43539818cea6c0e91bd6ed2b340dab491f8be2d0" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归"><a href="#方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归" class="headerlink" title="方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归"></a>方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归</h2><p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/3378001ce9424d10a0cb4df318b4d723f0502080" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法七-遍历数组-看前方有没有和当前值相等的值"><a href="#方法七-遍历数组-看前方有没有和当前值相等的值" class="headerlink" title="方法七, 遍历数组, 看前方有没有和当前值相等的值"></a>方法七, 遍历数组, 看前方有没有和当前值相等的值</h2><ul>
<li>定义 ret = [] 用于存放结果数组</li>
<li>遍历原数组, 取出当前项, 如果当前项的前方存在相等的项跳过, 否则说明这是当前项最后一次在数组中出现将其加入到结果数组</li>
<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>
</ul>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/8e9f384f9adf391ad8afc71c46096dd80d8df335" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法八-使用-reduce-原理同方法一"><a href="#方法八-使用-reduce-原理同方法一" class="headerlink" title="方法八, 使用 reduce 原理同方法一"></a>方法八, 使用 reduce 原理同方法一</h2><p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/4b314b641eeaa0da4ae0ccf6ba1bbfff96bf4852" target="_blank" rel="noopener">地址</a></p>
<h2 id="方法九-利用-Set-值不能重复的特性实现数组的去重"><a href="#方法九-利用-Set-值不能重复的特性实现数组的去重" class="headerlink" title="方法九, 利用 Set 值不能重复的特性实现数组的去重"></a>方法九, 利用 Set 值不能重复的特性实现数组的去重</h2><p>过于简单, 不再赘述</p>
<p>本方法代码<a href="https://github.com/luoquanquan/learn-fe/commit/29526d14c6e7a27315b6d4bdb1cc457f9144cf2c" target="_blank" rel="noopener">地址</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>生成随机数</title>
    <url>/handle-note/2020/02/03/basic-js/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li><p><code>Math.ceil(n)</code> 向上取整, 返回大于等于 n 的整数</p>
</li>
<li><p><code>Math.floor(n)</code> 向下取整, 返回 n 的整数部分</p>
</li>
<li><p><code>parseInt(n)</code> 向下取整, 返回 n 的整数部分</p>
</li>
<li><p><code>Math.round(n)</code> 四舍五入取整, 返回 n 四舍五入后的整数</p>
</li>
<li><p><code>Math.random(n)</code> 生成 [0, 1) 的随机数</p>
</li>
<li><p><code>Math.ceil(Math.random()*10)</code> 均衡获取 [1, 10] 之间的随机整数</p>
<details>
  <summary>代码示例详情</summary>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ret = []</span><br><span class="line"><span class="keyword">while</span>(i++ &lt; <span class="number">1e9</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> randomNum = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>)</span><br><span class="line">  <span class="keyword">if</span> (ret[randomNum]) &#123;</span><br><span class="line">    ret[randomNum]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret[randomNum] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(ret)</span><br></pre></td></tr></table></figure>
<p>  上述代码运行的结果如下:</p>
<p>  node 中:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬───────────┐</span><br><span class="line">│ (index) │  Values   │</span><br><span class="line">├─────────┼───────────┤</span><br><span class="line">│    1    │ 100004455 │</span><br><span class="line">│    2    │ 99992092  │</span><br><span class="line">│    3    │ 99995733  │</span><br><span class="line">│    4    │ 99989966  │</span><br><span class="line">│    5    │ 100006012 │</span><br><span class="line">│    6    │ 100004826 │</span><br><span class="line">│    7    │ 99999108  │</span><br><span class="line">│    8    │ 99994649  │</span><br><span class="line">│    9    │ 100004694 │</span><br><span class="line">│   10    │ 100008465 │</span><br><span class="line">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>

<p>  浏览器中:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1: 100002116</span><br><span class="line">2: 99998960</span><br><span class="line">3: 100010656</span><br><span class="line">4: 99996773</span><br><span class="line">5: 100005989</span><br><span class="line">6: 99999774</span><br><span class="line">7: 99997476</span><br><span class="line">8: 100003979</span><br><span class="line">9: 99989204</span><br><span class="line">10: 99995073</span><br></pre></td></tr></table></figure>
</details>
</li>
<li><p><code>Math.floor(Math.random()*10)</code> 均衡获取 [0, 9] 的随机整数</p>
<details>
  <summary>代码示例详情</summary>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ret = []</span><br><span class="line"><span class="keyword">while</span>(i++ &lt; <span class="number">1e9</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> randomNum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>)</span><br><span class="line">  <span class="keyword">if</span> (ret[randomNum]) &#123;</span><br><span class="line">    ret[randomNum]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret[randomNum] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(ret)</span><br></pre></td></tr></table></figure>
<p>  上述代码运行的结果如下:</p>
<p>  node 中:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬───────────┐</span><br><span class="line">│ (index) │  Values   │</span><br><span class="line">├─────────┼───────────┤</span><br><span class="line">│    0    │ 100015160 │</span><br><span class="line">│    1    │ 100006201 │</span><br><span class="line">│    2    │ 99989259  │</span><br><span class="line">│    3    │ 99988278  │</span><br><span class="line">│    4    │ 100005566 │</span><br><span class="line">│    5    │ 100001095 │</span><br><span class="line">│    6    │ 100003096 │</span><br><span class="line">│    7    │ 99981274  │</span><br><span class="line">│    8    │ 100007022 │</span><br><span class="line">│    9    │ 100003049 │</span><br><span class="line">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>

<p>  浏览器中:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0: 100006310</span><br><span class="line">1: 100000609</span><br><span class="line">2: 100001411</span><br><span class="line">3: 99998525</span><br><span class="line">4: 99991009</span><br><span class="line">5: 100001548</span><br><span class="line">6: 100004093</span><br><span class="line">7: 99989084</span><br><span class="line">8: 100013441</span><br><span class="line">9: 99993970</span><br></pre></td></tr></table></figure>
</details></li>
<li><p><code>Math.round(Math.random())</code> 均衡比例获取 0 或者 1</p>
</li>
<li><p><code>Math.round(Math.random()*10)</code> 获取 [0, 10]的随机整数, 其中获取 0 和 10的几率为获取其他值的一半.</p>
<details>
  <summary>详细原因, 概率一目了然</summary><br>

<table>
<thead>
<tr>
<th>随机值范围</th>
<th>得到的值</th>
</tr>
</thead>
<tbody><tr>
<td>[0, 0.5)</td>
<td>0</td>
</tr>
<tr>
<td>[0.5, 1.5)</td>
<td>1</td>
</tr>
<tr>
<td>[1.5, 2.5)</td>
<td>2</td>
</tr>
<tr>
<td>[2.5, 3.5)</td>
<td>3</td>
</tr>
<tr>
<td>[3.5, 4.5)</td>
<td>4</td>
</tr>
<tr>
<td>[4.5, 5.5)</td>
<td>5</td>
</tr>
<tr>
<td>[5.5, 6.5)</td>
<td>6</td>
</tr>
<tr>
<td>[6.5, 7.5)</td>
<td>7</td>
</tr>
<tr>
<td>[7.5, 8.5)</td>
<td>8</td>
</tr>
<tr>
<td>[8.5, 9.5)</td>
<td>9</td>
</tr>
<tr>
<td>[9.5, 10)</td>
<td>10</td>
</tr>
<tr>
<td></details></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="生成一个-min-max-的随机整数"><a href="#生成一个-min-max-的随机整数" class="headerlink" title="生成一个 [min, max] 的随机整数"></a>生成一个 [min, max] 的随机整数</h2><ul>
<li>生成随机数坑定要用到 <code>Math.random() -&gt; [0, 1)</code></li>
<li>可以把一个数变成整数的方法有: <code>parseInt() Math.floor() Math.round() Math.ceil()</code></li>
<li>这里选择功能强劲(<a href="https://luoquanquan.github.io/note/2020/02/04/basic-js/parseInt-vs-Math-floor">为什么这么说呢</a>)的 parseInt 直接截取数字的整数部分向下取整</li>
<li>那么不难得到 <code>parseInt(Math.random() * 10) -&gt; [0, 9]</code></li>
<li>所以, 如果我们想要得到一个 [0, max] 的随机数只需要 <code>parseInt(Math.random() * (max + 1))</code></li>
<li>想要得到一个 [1, max] 的随机数只需要 <code>parseInt(Math.random() * (max - 1 + 1)) + 1</code></li>
<li>进而可得出, 想要得到一个 [min, max] 的随机数. 把括号里的 -1 和括号外的 +1 等量代换成 min <code>parseInt(Math.random() * (max - min + 1)) + min</code></li>
</ul>
<p>最终可以得出, 生成一个 [min, max] 的随机整数的代码为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min = <span class="number">0</span>, max = min</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (max === min) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (min + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成一个-min-max-的长度为-len-的随机整数数组"><a href="#生成一个-min-max-的长度为-len-的随机整数数组" class="headerlink" title="生成一个 [min, max] 的长度为 len 的随机整数数组"></a>生成一个 [min, max] 的长度为 len 的随机整数数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min = <span class="number">0</span>, max = min</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (max === min) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (min + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> randomArr = <span class="function">(<span class="params">len, min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ret = <span class="keyword">new</span> <span class="built_in">Array</span>(len)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    ret[i] = randomNum(min, max)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成两个数之间的随机数-范围数字"><a href="#生成两个数之间的随机数-范围数字" class="headerlink" title="生成两个数之间的随机数(范围数字)"></a>生成两个数之间的随机数(范围数字)</h2><h3 id="四种情况"><a href="#四种情况" class="headerlink" title="四种情况"></a>四种情况</h3><h4 id="min-max"><a href="#min-max" class="headerlink" title="[min, max]"></a>[min, max]</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> range = max - min</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">  <span class="comment">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class="line">  <span class="keyword">return</span> min + <span class="built_in">Math</span>.round(random * range)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  运行结果:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬────────┐</span><br><span class="line">│ (index) │ Values │</span><br><span class="line">├─────────┼────────┤</span><br><span class="line">│    0    │  487   │</span><br><span class="line">│    1    │  989   │</span><br><span class="line">│    2    │  1007  │</span><br><span class="line">│    3    │  1009  │</span><br><span class="line">│    4    │  1029  │</span><br><span class="line">│    5    │  967   │</span><br><span class="line">│    6    │  994   │</span><br><span class="line">│    7    │  1004  │</span><br><span class="line">│    8    │  980   │</span><br><span class="line">│    9    │  1044  │</span><br><span class="line">│   10    │  490   │</span><br><span class="line">└─────────┴────────┘</span><br></pre></td></tr></table></figure></p>
<p>  通过扩大 min max 的范围并掐头去尾, 解决最大最小值概率为一半的问题<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (min &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'min 不能小于 1'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  min = min - <span class="number">1</span></span><br><span class="line">  max = max + <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> range = max - min</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">  <span class="keyword">const</span> num = min + <span class="built_in">Math</span>.round(random * range)</span><br><span class="line">  <span class="keyword">if</span> ([min, max].includes(num)) &#123;</span><br><span class="line">    <span class="keyword">return</span> randomNum(min + <span class="number">1</span>, max - <span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  修改后运行结果:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬─────────┬──────────┐</span><br><span class="line">│ (index) │    0    │    1     │</span><br><span class="line">├─────────┼─────────┼──────────┤</span><br><span class="line">│    1    │ 998826  │ &#39;9.99%&#39;  │</span><br><span class="line">│    2    │ 1000556 │ &#39;10.01%&#39; │</span><br><span class="line">│    3    │ 999015  │ &#39;9.99%&#39;  │</span><br><span class="line">│    4    │ 997972  │ &#39;9.98%&#39;  │</span><br><span class="line">│    5    │ 1000372 │ &#39;10.00%&#39; │</span><br><span class="line">│    6    │ 1000381 │ &#39;10.00%&#39; │</span><br><span class="line">│    7    │ 1000665 │ &#39;10.01%&#39; │</span><br><span class="line">│    8    │ 1001230 │ &#39;10.01%&#39; │</span><br><span class="line">│    9    │ 1001341 │ &#39;10.01%&#39; │</span><br><span class="line">│   10    │ 999642  │ &#39;10.00%&#39; │</span><br><span class="line">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>
<h4 id="min-max-1"><a href="#min-max-1" class="headerlink" title="[min, max)"></a>[min, max)</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> range = max - min</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">  <span class="comment">// 向下取整</span></span><br><span class="line">  <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(random * range)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  运行结果:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬─────────┬──────────┐</span><br><span class="line">│ (index) │    0    │    1     │</span><br><span class="line">├─────────┼─────────┼──────────┤</span><br><span class="line">│    1    │ 1110540 │ &#39;11.11%&#39; │</span><br><span class="line">│    2    │ 1109941 │ &#39;11.10%&#39; │</span><br><span class="line">│    3    │ 1111700 │ &#39;11.12%&#39; │</span><br><span class="line">│    4    │ 1110570 │ &#39;11.11%&#39; │</span><br><span class="line">│    5    │ 1111081 │ &#39;11.11%&#39; │</span><br><span class="line">│    6    │ 1112978 │ &#39;11.13%&#39; │</span><br><span class="line">│    7    │ 1112090 │ &#39;11.12%&#39; │</span><br><span class="line">│    8    │ 1111245 │ &#39;11.11%&#39; │</span><br><span class="line">│    9    │ 1109855 │ &#39;11.10%&#39; │</span><br><span class="line">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>
<h4 id="min-max-2"><a href="#min-max-2" class="headerlink" title="(min, max]"></a>(min, max]</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> range = max - min</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 四舍五入存在最小值和最大值出现的概率是中间值一半的误差, 正好给他均匀过去了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.round(range * random) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> num = min + <span class="built_in">Math</span>.round(random * range);</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  运行结果:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬─────────┬──────────┐</span><br><span class="line">│ (index) │    0    │    1     │</span><br><span class="line">├─────────┼─────────┼──────────┤</span><br><span class="line">│    2    │ 1109886 │ &#39;11.10%&#39; │</span><br><span class="line">│    3    │ 1110669 │ &#39;11.11%&#39; │</span><br><span class="line">│    4    │ 1113279 │ &#39;11.13%&#39; │</span><br><span class="line">│    5    │ 1111945 │ &#39;11.12%&#39; │</span><br><span class="line">│    6    │ 1110154 │ &#39;11.10%&#39; │</span><br><span class="line">│    7    │ 1111446 │ &#39;11.11%&#39; │</span><br><span class="line">│    8    │ 1111335 │ &#39;11.11%&#39; │</span><br><span class="line">│    9    │ 1111244 │ &#39;11.11%&#39; │</span><br><span class="line">│   10    │ 1110042 │ &#39;11.10%&#39; │</span><br><span class="line">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>
<h4 id="min-max-3"><a href="#min-max-3" class="headerlink" title="(min, max)"></a>(min, max)</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> range = max - min</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> num = min + <span class="built_in">Math</span>.round(random * range);</span><br><span class="line">  <span class="comment">// 命中最大值和最小值时直接忽略</span></span><br><span class="line">  <span class="keyword">if</span> ([min, max].includes(num)) &#123;</span><br><span class="line">    <span class="keyword">return</span> randomNum(min, max)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  执行结果:<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌─────────┬─────────┬──────────┐</span><br><span class="line">│ (index) │    0    │    1     │</span><br><span class="line">├─────────┼─────────┼──────────┤</span><br><span class="line">│    2    │ 1249708 │ &#39;12.50%&#39; │</span><br><span class="line">│    3    │ 1248357 │ &#39;12.48%&#39; │</span><br><span class="line">│    4    │ 1248988 │ &#39;12.49%&#39; │</span><br><span class="line">│    5    │ 1251120 │ &#39;12.51%&#39; │</span><br><span class="line">│    6    │ 1250390 │ &#39;12.50%&#39; │</span><br><span class="line">│    7    │ 1252465 │ &#39;12.52%&#39; │</span><br><span class="line">│    8    │ 1248322 │ &#39;12.48%&#39; │</span><br><span class="line">│    9    │ 1250650 │ &#39;12.51%&#39; │</span><br><span class="line">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>
<h3 id="PS-本系列代码的测试用例"><a href="#PS-本系列代码的测试用例" class="headerlink" title="PS 本系列代码的测试用例"></a>PS 本系列代码的测试用例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ret = []</span><br><span class="line"><span class="keyword">const</span> randomNum = <span class="function">(<span class="params">min, max</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> range = max - min</span><br><span class="line">    <span class="keyword">const</span> random = <span class="built_in">Math</span>.random()</span><br><span class="line">    <span class="comment">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class="line">    <span class="keyword">return</span> min + <span class="built_in">Math</span>.floor(random * range)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">while</span>(i++ &lt; <span class="number">1e7</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> random = randomNum(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">if</span> (ret[random]) &#123;</span><br><span class="line">    ret[random]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret[random] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = ret.map(<span class="function"><span class="params">i</span> =&gt;</span> [i, <span class="string">`<span class="subst">$&#123;(i <span class="regexp">/ 1e7 * 100).toFixed(2)&#125;%`])</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">console.table(ret)</span></span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Math</tag>
        <tag>Random</tag>
      </tags>
  </entry>
  <entry>
    <title>同时配置 gitlab 和 github</title>
    <url>/handle-note/2020/02/02/tips/%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AE%20gitlab%20%E5%92%8C%20github/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>日常工作中, 公司内部项目通常是 git 来管理. 自己做的开源项目 Or 学习第三方的大佬开源的项目往往在 github 或者 coding 之类的平台上也由 git 来管理. 那么问题来了…</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class="line">正克隆到 'handle-note'...</span><br><span class="line">ssh: Could not resolve hostname github.com2: nodename nor servname provided, or not known</span><br><span class="line">fatal: 无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>

<p>当要 <code>clone</code> GitHub 上的项目时会发现没有权限了. 面对这种情况有三种方案</p>
<h2 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h2><ul>
<li>点击 Clone or download 的绿色按钮</li>
<li>在弹出的下拉框中点击右下角 <code>Download Zip</code> 下载代码库的安装包</li>
</ul>
<p>使用此方案下载的代码包解压后不包含 <code>.git</code> 项目配置目录无法跟踪项目并提交</p>
<h2 id="使用-https-方案"><a href="#使用-https-方案" class="headerlink" title="使用 https 方案"></a>使用 https 方案</h2><ul>
<li>点击 Clone or download 的绿色按钮</li>
<li>在弹出的下拉框中点击左上角 Use HTTPS 输入框中的链接变成了以 https 开头</li>
<li>执行以下命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/luoquanquan/handle-note.git</span><br></pre></td></tr></table></figure></li>
<li>展示的结果如下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正克隆到 'handle-note'...</span><br><span class="line">remote: Enumerating objects: 220, done.</span><br><span class="line">remote: Counting objects: 100% (220/220), done.</span><br><span class="line">remote: Compressing objects: 100% (154/154), done.</span><br><span class="line">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class="line">接收对象中: 100% (220/220), 593.36 KiB | 70.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure></li>
<li>完成</li>
</ul>
<p>使用以上方法克隆的项目可以正常跟踪和提交</p>
<h2 id="创建配置文件支持-shh-方式"><a href="#创建配置文件支持-shh-方式" class="headerlink" title="创建配置文件支持 shh 方式"></a>创建配置文件支持 shh 方式</h2><ul>
<li>打开命令行, 执行 <code>sh $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li>
<li><code>Enter file in which to save the key</code> 在这一步的时候切记创建一个新的 key 名字, 否则会覆盖掉当前正在用的秘钥文件; 示例: <code>/Users/quanquanluo/.ssh/id_github_rsa</code></li>
<li>一路回车…</li>
<li>完成后进入用户的秘钥目录 Mac: <code>~/.ssh</code> Windows: <code>C:/Users/quanquan/.ssh</code> 此时该目录下文件列表<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id_github_rsa.pub id_rsa.pub id_github_rsa</span><br><span class="line">id_rsa            known_hosts</span><br></pre></td></tr></table></figure>
包含了公司 git 的配置文件和 github 项目的配置文件</li>
<li>把生成文件 id_github_rsa.pub 中的内容粘贴到这里 <a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">https://github.com/settings/ssh/new</a> 在登录的 github 的前提下</li>
<li>最后, 在当前目录创建 config 文件, 并粘贴一下内容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host 我的公司</span><br><span class="line">    HostName baidu.gitlab.com</span><br><span class="line">    IdentityFile "~/.ssh/id_rsa"</span><br><span class="line">Host GitHub</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile "~/.ssh/id_github_rsa"</span><br></pre></td></tr></table></figure></li>
<li>验证:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class="line">正克隆到 'handle-note'...</span><br><span class="line">remote: Enumerating objects: 220, done.</span><br><span class="line">remote: Counting objects: 100% (220/220), done.</span><br><span class="line">remote: Compressing objects: 100% (154/154), done.</span><br><span class="line">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class="line">接收对象中: 100% (220/220), 593.36 KiB | 84.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="https-和-ssh-的区别"><a href="#https-和-ssh-的区别" class="headerlink" title="https 和 ssh 的区别"></a>https 和 ssh 的区别</h2><h3 id="clone-项目"><a href="#clone-项目" class="headerlink" title="clone 项目"></a>clone 项目</h3><p>使用 ssh 方式 clone 项目, 你必须是该项目的拥有者或者管理者. 并且已经成功配置了 ssh key, 然而使用 http 方式 clone 项目没有这个限制, 你可以随意克隆 github 上的项目</p>
<h3 id="push-项目"><a href="#push-项目" class="headerlink" title="push 项目"></a>push 项目</h3><p>使用 ssh 方式 push 代码时, 你不需要验证用户名和密码. 但是如果你再创建 <code>ssh key</code> 时设置了密码就需要验证配对密码了. 而对于使用 https 的用户每次 push 代码的时候需要验证用户名和密码(首次推送可以选择缓存)</p>
]]></content>
      <categories>
        <category>Tips</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Windows</tag>
        <tag>git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>查询指定端口号对应的任务</title>
    <url>/handle-note/2020/02/01/tips/Mac%20%E5%88%87%E6%8D%A2%20zsh%20%E5%92%8C%20bash/</url>
    <content><![CDATA[<h2 id="zsh-gt-bash"><a href="#zsh-gt-bash" class="headerlink" title="zsh -&gt; bash"></a>zsh -&gt; bash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="bash-gt-zsh"><a href="#bash-gt-zsh" class="headerlink" title="bash -&gt; zsh"></a>bash -&gt; zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<h2 id="PS-两种操作之后都需要重启终端才能生效"><a href="#PS-两种操作之后都需要重启终端才能生效" class="headerlink" title="PS: 两种操作之后都需要重启终端才能生效"></a>PS: 两种操作之后都需要重启终端才能生效</h2>]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 基础</title>
    <url>/handle-note/2020/01/30/redis/Redis%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure>

<h2 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前台启动</span></span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动</span></span><br><span class="line">redis-server &amp;</span><br></pre></td></tr></table></figure>

<h2 id="客户端-cli"><a href="#客户端-cli" class="headerlink" title="客户端 cli"></a>客户端 cli</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="redis-数据类型"><a href="#redis-数据类型" class="headerlink" title="redis 数据类型"></a>redis 数据类型</h2><ul>
<li>string 字符串 <code>get set getrange incr decr expire</code></li>
<li>hash 对象 <code>hset hget hdel hmget hgetall</code></li>
<li>列表 数组 <code>lpush lpop lrange lrem lindex rpush rpop ...</code></li>
<li>set 集合<ul>
<li>无序集合 <code>sadd smembers srem sunion sinter sdiff</code></li>
<li>有序集合 <code>zadd zrange withscores</code></li>
</ul>
</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><ul>
<li><p>查看 redis 中的所有 keys</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del a</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看记录值的类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type a</span><br></pre></td></tr></table></figure>
</li>
<li><p>给某条记录设置有效时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire a 5</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看某条记录的有效时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><ul>
<li><p>设置一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set a 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get a</span><br></pre></td></tr></table></figure>
</li>
<li><p>让某条记录自增</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incr a</span><br></pre></td></tr></table></figure>
</li>
<li><p>让某条记录自减</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">decr a</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取某条记录指定范围内的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set name quanquan</span><br><span class="line">getrange name 0 1 # qu -&gt; 包前也包后</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="hash-相关"><a href="#hash-相关" class="headerlink" title="hash 相关"></a>hash 相关</h3><ul>
<li><p>创建一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset user name quanquan</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取记录的属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hget user name</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置记录的另一条属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset user sex male</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取记录的多条属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hmget user sex name</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取记录的所有内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hgetall user</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除记录的某个属性字段</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdel user name</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="列表相关"><a href="#列表相关" class="headerlink" title="列表相关"></a>列表相关</h3><ul>
<li><p>创建一条记录(向左 push)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush arr 1 2 3 4 5</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看记录范围内的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrange arr 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一条记录(向右 push)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpush arr2 1 2 3 4 5</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看记录范围内的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrange arr2 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>从数组头部删除一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop arr</span><br></pre></td></tr></table></figure>
</li>
<li><p>从数组尾部删除一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpop arr</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定的记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem arr 3 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中, arr 是指定要操作的数组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个 3 指的是数组遍历数组中的三个元素范围</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个 3 指的是从数组中找到数字 3 并移除他</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>取出数组中指定的项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> index 是从 0 开始的</span></span><br><span class="line">lindex arr 1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="集合相关"><a href="#集合相关" class="headerlink" title="集合相关"></a>集合相关</h3><h4 id="无序集合"><a href="#无序集合" class="headerlink" title="无序集合"></a>无序集合</h4><ul>
<li><p>创建一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd myset 1 2 3 4</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有的记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers myset</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除集合中的某一项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem myset 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>取两个 set 的并集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sunion myset myset1</span><br></pre></td></tr></table></figure>
</li>
<li><p>取两个 set 的交集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter myset myset1</span><br></pre></td></tr></table></figure>
</li>
<li><p>取两个 set 的差集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdiff myset myset1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><ul>
<li><p>创建记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd my 1 100</span><br><span class="line">zadd my 2 200</span><br><span class="line">zadd my 1 101</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看指定范围的记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange my 0 -1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1) <span class="string">"100"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) <span class="string">"101"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3) <span class="string">"200"</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>游标 &amp; 索引 &amp; 权限 &amp; 备份</title>
    <url>/handle-note/2020/01/29/mongo/%E6%B8%B8%E6%A0%87%20&amp;%20%E7%B4%A2%E5%BC%95%20&amp;%20%E6%9D%83%E9%99%90%20&amp;%20%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>通过 var cursor = db.user.find() 返回的 cursor 其实是一个游标(迭代器), 可以通过不停的使用 cursor.next() 来获取得到的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cursor = db.user.find()</span><br><span class="line"><span class="keyword">while</span>(cursor.hasNext()) &#123;</span><br><span class="line">    print(cursor.next())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过使用以上命令可以打印出 user 中的所有文档</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cursor = db.user.find()</span><br><span class="line">cursor.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    printjson(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>cursor 有 forEach 方法, 但是并不是一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(cursor)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>创建索引</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;name: 1&#125;)</span><br></pre></td></tr></table></figure>
<p>其中, name 为添加索引的字段名, 1 代表正序, -1 代表倒序</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ul>
<li>使用 admin 数据库 <code>use admin</code></li>
<li>创建用户<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;</span><br><span class="line">    user: 'quanquan',</span><br><span class="line">    pwd: '123456',</span><br><span class="line">    roles:[&#123;</span><br><span class="line">        role: 'readWrite',</span><br><span class="line">        db: 'users'</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>关闭 mongodb 以后以需要登录的方式启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --dbpath=/Users/quanquanluo/data/db --auth</span><br></pre></td></tr></table></figure></li>
<li>登录<ul>
<li>方案 1, 连接后登录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先连接 mongo</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到 admin 数据库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录 mongo</span></span><br><span class="line">db.auth('quanquan', '123456')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ...登录完成</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方案 2, 连接时登录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo -u quanquan -p 123456 [localhost/admin]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其中 localhost/admin 的意思是指定数据库, 是可以忽略的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ...登录完成</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="备份和还原"><a href="#备份和还原" class="headerlink" title="备份和还原"></a>备份和还原</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> db        数据库名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mongodump 集合</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> out       导出的文件</span></span><br><span class="line">mongodump --db users --collection user --out ./bak</span><br></pre></td></tr></table></figure>

<h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongorestore ./bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">mongorestore --dir ./bak</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>查询指定端口号对应的任务</title>
    <url>/handle-note/2020/01/28/tips/%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 只能获取当前用户启动的命令</span></span><br><span class="line">lsof -i:27017</span><br></pre></td></tr></table></figure>

<h2 id="管理员权限启动任务需要使用命令"><a href="#管理员权限启动任务需要使用命令" class="headerlink" title="管理员权限启动任务需要使用命令"></a>管理员权限启动任务需要使用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo lsof -i:27017</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库操作</title>
    <url>/handle-note/2020/01/28/mongo/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li><p>展示所有数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use users</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建集合(刚刚创建的空数据库不会在 show dbs 中展示出来, 需要添加集合)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.createCollection('user')</span><br></pre></td></tr></table></figure>
</li>
<li><p>展示集合</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除集合</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.drop()</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据库(在需要删除的数据库执行以下命令)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除集合</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.drop()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><ul>
<li><p>在集合中新增一个文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.insert(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>
<p>运行以上命令, 如果当前数据库中已经存在 user 集合则会在 user 集合中创建一条文档, 如果当前数据库中没有 user 集合便会创建 user 集合并向该集合中插入一条文档</p>
</li>
<li><p>指定 id 插入文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.insert(&#123;_id: 1, name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>
<p>运行以上命令, 系统会根据你指定的 _id 字段作为文档的 _id 而不会自动生成 ObjectId</p>
</li>
<li><p>智能插入方法, 如果当前 _id 的文档存在则更新其记录, 如果不存在则添加一条记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.save(&#123;_id: 1, name: 'quanquandequan', age: '9'&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li><p>删除符合条件的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.remove(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>
<p>运行以上命令默认会删除所有符合条件的文档</p>
</li>
<li><p>删除第一条符合条件的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.remove(&#123;name: 'quanquan'&#125;, &#123;justOne: true&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul>
<li>查询到文档, 并修改他<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.update(&#123;_id: 1&#125;, &#123;sex: 'male'&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>运行以上命令会覆盖式的修改整个文档, 如果只需要修改某个属性, 需要使用 $set</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.update(&#123;_id: 1&#125;, &#123;$set: &#123;sex: 'male'&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><ul>
<li><p>查询整个集合中的所有文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.find()</span><br></pre></td></tr></table></figure></li>
<li><p>查询集合中符合条件的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数组属性存在某个值的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;time: 1&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数组属性存在多个值的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;time: &#123;$all: [1, 3]&#125;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数组属性存在某些值的文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;time: &#123;$in: [1, 3]&#125;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前集合中文档的条数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.user.count()</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pageSize = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> currentPage = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">db.find().limit(pageSize).skip(pageSize * (currentPage - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>上述命令中 limit 为限制文档数, skip 为跳过文档数. 组合起来实现了分页的功能</p>
</li>
</ul>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>正如上述命令中的 $set 还有很多操作符如下,</p>
<h3 id="修改相关"><a href="#修改相关" class="headerlink" title="修改相关"></a>修改相关</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$set</td>
<td>不覆盖的设置文档中的某条属性</td>
</tr>
<tr>
<td>$unset</td>
<td>移除掉文档中的某条属性</td>
</tr>
<tr>
<td>$inc</td>
<td>文档中某个属性的值自增</td>
</tr>
<tr>
<td>$push</td>
<td>当文档中某个属性是数组的是时候想属性中添加一个值</td>
</tr>
<tr>
<td>$addToSet</td>
<td>当文档中某个属性是数组的是时候想属性中添加一个值, 且具备了去重的能力, 如果已经存在相关的记录就不添加了</td>
</tr>
<tr>
<td>$pop</td>
<td>移除数组属性值中的最后一个值</td>
</tr>
<tr>
<td>‘hobby.0’</td>
<td>修改数组属性 hobby 的第 0 项的值</td>
</tr>
</tbody></table>
<h3 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$in</td>
<td>属性值在某个属性数组范围内的时候命中 eg: 找出工作 1 年 3 年 5 年的员工: {jobTime: {$in: [1, 3, 5]}}, 当属性是数组的时候, 只要数组总包含一个 in 操作符中的 item 就会被命中</td>
</tr>
<tr>
<td>$nin = $not: {$in: []}</td>
<td>$in 的取反操作, 属性值不再某个范围内的时候命中</td>
</tr>
<tr>
<td>$ne = not equal</td>
<td>不相等的时候</td>
</tr>
<tr>
<td>$lt</td>
<td>属性值小于某个值的时候命中</td>
</tr>
<tr>
<td>$gt</td>
<td>属性值大于某个值的时候命中</td>
</tr>
<tr>
<td>$lte</td>
<td>属性值小于等于某个值的时候命中</td>
</tr>
<tr>
<td>$gte</td>
<td>属性值大于等于某个值的时候命中</td>
</tr>
<tr>
<td>$all</td>
<td>数组属性中包含所有的选择条件中的值才能命中 eg: {$all: [1, 3]} 能命中 time: [1, 2, 3], 但是不能命中 time: [1, 2, 4]</td>
</tr>
</tbody></table>
<h2 id="文档读百遍-其义自见"><a href="#文档读百遍-其义自见" class="headerlink" title="文档读百遍, 其义自见"></a>文档读百遍, 其义自见</h2><p><a href="https://mongoosejs.com/" target="_blank" rel="noopener">mongoose</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo 的安装和启动和连接</title>
    <url>/handle-note/2020/01/28/mongo/%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure>

<p>安装完成后 MongoDB 的默认配置文件 <code>/usr/local/etc/mongod.conf</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统日志</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/usr/local/var/log/mongodb/mongo.log</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 数据库本地文件</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">/usr/local/var/mongodb</span></span><br><span class="line"><span class="comment"># 网络相关</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li><p>普通启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定配置文件的启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认的 dbpath 为 /data/db 我的电脑上没有这个路径还没有权限创建...</span></span><br><span class="line">mongod --dbpath=/Users/quanquanluo/data/db</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>启动后 mongo 会在 dbpath 目录下创建一坨文件, 文件列表如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WiredTiger</span><br><span class="line">WiredTiger.lock</span><br><span class="line">WiredTiger.turtle</span><br><span class="line">WiredTiger.wt</span><br><span class="line">WiredTigerLAS.wt</span><br><span class="line">_mdb_catalog.wt</span><br><span class="line">collection-0--2763005286789933401.wt</span><br><span class="line">collection-2--2763005286789933401.wt</span><br><span class="line">collection-4--2763005286789933401.wt</span><br><span class="line">diagnostic.data</span><br><span class="line">files</span><br><span class="line">index-1--2763005286789933401.wt</span><br><span class="line">index-3--2763005286789933401.wt</span><br><span class="line">index-5--2763005286789933401.wt</span><br><span class="line">index-6--2763005286789933401.wt</span><br><span class="line">journal</span><br><span class="line">mongod.lock</span><br><span class="line">sizeStorer.wt</span><br><span class="line">storage.bson</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ul>
<li><p>命令行连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>
</li>
<li><p>可视化工具连接<br>Robo 3T <a href="https://robomongo.org/download" target="_blank" rel="noopener">下载地址</a></p>
</li>
</ul>
<p>ps: 这个东西, 装最新的就完了~</p>
<h2 id="对比-MySQL"><a href="#对比-MySQL" class="headerlink" title="对比 MySQL"></a>对比 MySQL</h2><table>
<thead>
<tr>
<th>mongo</th>
<th>MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>文档(document) <font color="red">单个文档最大 16M</font></td>
<td>记录(row)</td>
</tr>
<tr>
<td>集合(collection)</td>
<td>表(table)</td>
</tr>
<tr>
<td>数据库(database) 32 位系统上一个数据库存储文件不能超过 2G</td>
<td>数据库(database)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
