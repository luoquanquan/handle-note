[{"title":"package.json 中库的版本号符号","url":"/%E5%90%8E%E7%AB%AF/tips/package.json%20%E4%B8%AD%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AC%A6%E5%8F%B7/","content":"<blockquote>\n<p>package.json 的依赖库版本号前大多有一个 ^ ~ 这两者有什么区别呢</p>\n</blockquote>\n<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><ul>\n<li>波浪符号(~): 当依赖的<strong>修订号</strong>发生升级后, 使用 <code>npm i</code> 会自动升级最新版本</li>\n<li>插入符号(^): 当依赖的<strong>次版本号</strong>发生升级后, 使用 <code>npm i</code> 会自动升级最新版本</li>\n</ul>\n<p>以上两者均不会更新 <code>package.json</code></p>\n<h2 id=\"原理及使用步骤\"><a href=\"#原理及使用步骤\" class=\"headerlink\" title=\"原理及使用步骤\"></a>原理及使用步骤</h2><p>使用 <code>npm i gulp@4.0.0 hexo@4.1.0</code> 之后修改 <code>package.json</code> 文件如下:</p>\n<p>PS: 修改的原因是当前利用 <code>npm</code> 安装的模块默认使用的是 <code>^</code> 修饰符</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">    \"gulp\": \"~4.0.0\",</span><br><span class=\"line\">    \"hexo\": \"^4.1.0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中, <code>gulp</code> 版本符号使用了 <code>~</code> 而 <code>hexo</code> 的版本符号使用了 <code>^</code>. 根据概念, 如果存在 <code>gulp</code> 的修订号更新或者 <code>hexo</code> 的次版本号更新. 通过 <code>npm i</code> 安装依赖时应该都会更新…</p>\n<p>然而, 执行后结果如下</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">    \"gulp\": \"~4.0.0\",</span><br><span class=\"line\">    \"hexo\": \"^4.1.0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看上去似乎没有什么改变, 执行 <code>npm list</code> 会得到以下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">├─┬ gulp@4.0.0</span><br><span class=\"line\">│ ├─ 似乎有那么一点点的失败</span><br><span class=\"line\">└─┬ hexo@4.1.0</span><br><span class=\"line\">  ├── 其他各种依赖包的版本</span><br></pre></td></tr></table></figure>\n\n<p>他还真没有什么改变…</p>\n<p>经过查阅各种资料我发现</p>\n<p>之所以出现以上的情况是因为, 项目中存在了 <code>package-lock.json</code> 文件. 删除该文件后再次 <code>npm i</code></p>\n<p>再看 <code>package.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">    \"gulp\": \"^4.0.0\",</span><br><span class=\"line\">    \"hexo\": \"^4.1.0\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>卧槽, 卧槽槽槽… 还是没有变化呀, 然后执行 <code>npm list</code> 会得到以下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">├─┬ gulp@4.0.2</span><br><span class=\"line\">│ ├─┬ 实际的版本号是更更新了的</span><br><span class=\"line\">└─┬ hexo@4.2.0</span><br><span class=\"line\">  ├── 还有各种依赖的信息</span><br><span class=\"line\">  ├── ......</span><br></pre></td></tr></table></figure>\n\n<p>可以看出, 虽然 <code>package.json</code> 里边记录的内容没有变化, 但是实际下载到的版本是升级以后的版本, 这个可谓是天坑, 刚刚在公司项目里边踩到…</p>\n<h2 id=\"其他常用的版本号修饰符\"><a href=\"#其他常用的版本号修饰符\" class=\"headerlink\" title=\"其他常用的版本号修饰符\"></a>其他常用的版本号修饰符</h2><ul>\n<li>* === “” 代表任意版本的版本号</li>\n<li>&gt; 必须大于版本号</li>\n<li>&gt;= 大于或等于版本号</li>\n<li>&lt; 必须小于版本号</li>\n<li>&lt;= 小于或等于版本号</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">语义化版本 2.0.0</a></li>\n<li><a href=\"https://blog.csdn.net/u011584949/article/details/80447862\" target=\"_blank\" rel=\"noopener\">node 版本控制 package.json</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json\" target=\"_blank\" rel=\"noopener\">What’s the difference between tilde(~) and caret(^) in package.json?</a></li>\n</ul>\n","categories":["后端"],"tags":["npm"]},{"title":"interview-5","url":"/%E5%89%8D%E7%AB%AF/interview/interview-5/","content":"<h2 id=\"推断以下代码执行的结果\"><a href=\"#推断以下代码执行的结果\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">ary</span>) </span>&#123;</span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    ary = [<span class=\"number\">0</span>]</span><br><span class=\"line\">    ary[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = fn(ary)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>以上代码执行的流程为<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-08-10-24-04.png\" alt=\"2020-03-08-10-24-04\"></p>\n<p>对于引用类型的参数, 函数调用时会按引用传递. 也就是说函数内部可以修改全局同名你变量的实际内容. 尽管是以形参的方式传入的.</p>\n<h2 id=\"推断以下代码执行的结果-1\"><a href=\"#推断以下代码执行的结果-1\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n + (--i))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn(<span class=\"number\">2</span>)</span><br><span class=\"line\">f(<span class=\"number\">3</span>)</span><br><span class=\"line\">fn(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)</span><br><span class=\"line\">f(<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的流程为<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-08-10-29-46.png\" alt=\"2020-03-08-10-29-46\"></p>\n<p>当四则运算符遇到小括号, 小括号里边只有自增 / 自减运算符时. 运算还是会按照预定的方式执行, 并不会限执行小括号里边的自增 / 自减运算符…</p>\n<p>例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> + (--a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> + (a--) <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - (--a) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> - (a--) <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> * (--a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> * (a--) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span> / (--a) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span> / (a--) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"推断以下代码执行的结果-2\"><a href=\"#推断以下代码执行的结果-2\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>  <span class=\"comment\">// 60</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">num</span>: <span class=\"number\">20</span>&#125;</span><br><span class=\"line\">obj.fn = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.num = num * <span class=\"number\">3</span></span><br><span class=\"line\">    num++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num += n</span><br><span class=\"line\">        num++</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(obj.num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = obj.fn</span><br><span class=\"line\">fn(<span class=\"number\">5</span>)</span><br><span class=\"line\">obj.fn(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, obj.num)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的流程为<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-08-10-51-53.png\" alt=\"2020-03-08-10-51-53\"></p>\n<p>所以, 以上代码执行的结果为 22, 23, 65, 30</p>\n<h2 id=\"推断以下代码执行的结果-3\"><a href=\"#推断以下代码执行的结果-3\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Fn.prototype = &#123;</span><br><span class=\"line\">    y: <span class=\"number\">400</span>,</span><br><span class=\"line\">    getX() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getY() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sum() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x + <span class=\"keyword\">this</span>.y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"keyword\">new</span> Fn</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === f2.getX)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getY === f2.getY)  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getY === Fn.prototype.getY)  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.__proto__.getX === f2.getX)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.getX === Fn.prototype.getX)  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1.constructor) <span class=\"comment\">// Object</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Fn.prototype.constructor)  <span class=\"comment\">// Object</span></span><br><span class=\"line\">f1.getX() <span class=\"comment\">// this: f1 f1.x = 100</span></span><br><span class=\"line\">f1.__proto__.getX() <span class=\"comment\">// this: f1.__proto__(Fn.prototype) Fn.prototype.x = undefined</span></span><br><span class=\"line\">f2.getY() <span class=\"comment\">// this: f2 f2.y = 200</span></span><br><span class=\"line\">Fn.prototype.getY() <span class=\"comment\">// this: Fn.prototype Fn.prototype.y = 400</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码执行的流程为:<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-08-11-07-03.png\" alt=\"2020-03-08-11-07-03\"></p>\n<p>最终打印的结果已经在注释中标记出来了~</p>\n<h2 id=\"点击按钮弹出指定的-index-问题\"><a href=\"#点击按钮弹出指定的-index-问题\" class=\"headerlink\" title=\"点击按钮弹出指定的 index 问题\"></a>点击按钮弹出指定的 index 问题</h2><p>示例代码在<a href=\"https://github.com/luoquanquan/learn-fe/tree/master/basic-js/click-index-btn\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"null-vs-undefined\"><a href=\"#null-vs-undefined\" class=\"headerlink\" title=\"null vs undefined\"></a>null vs undefined</h2><p>默认为 null 的情况:</p>\n<ul>\n<li>手动设置变量的值或者对象的某一属性值为 null(表示此时没有值, 以后可能会赋值)</li>\n<li>js DOM 元素获取的方法中, 如果没有获取到指定的元素对象. 默认返回 null</li>\n<li>Object.prototype.<strong>proto</strong> === null</li>\n<li>正则捕获时, 捕获不到匹配的模式时会返回 null</li>\n</ul>\n<p>默认为 undefined 的情况:</p>\n<ul>\n<li>变量提升, 只声明未定义的变量值就是 undefined</li>\n<li>严格模式下, 没有指定函数的执行上下文, 其内部的 this 就是 undefined</li>\n<li>获取对象没有的属性时, 返回 undefined</li>\n<li>函数定义了形参但是没有传入实参, 默认值 undefined</li>\n<li>函数没有显式的返回值, 默认返回 undefined</li>\n</ul>\n<h2 id=\"怎样解决多人开发的命名冲突问题\"><a href=\"#怎样解决多人开发的命名冲突问题\" class=\"headerlink\" title=\"怎样解决多人开发的命名冲突问题\"></a>怎样解决多人开发的命名冲突问题</h2><ul>\n<li>闭包</li>\n<li>单例模式</li>\n<li>模块化编程</li>\n</ul>\n<h2 id=\"你理解的闭包的作用是什么-优缺点\"><a href=\"#你理解的闭包的作用是什么-优缺点\" class=\"headerlink\" title=\"你理解的闭包的作用是什么, 优缺点\"></a>你理解的闭包的作用是什么, 优缺点</h2><p>闭包的概念:<br>当内部函数, 在定义它的作用域的外部被引用时. 就创建了该内部函数的闭包. 如果这个函数引用了定义他的外部函数的变量, 外部函数执行完毕后其定义的变量并不会被回收. 因为闭包需要他们.</p>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数, 常见的创建闭包方式. 就是在一个函数内部创建另一个函数</p>\n<p>闭包作用:</p>\n<ul>\n<li>保护, 使用闭包可以保护函数内部的变量不受全局变量的影响, 避免了函数命名冲突带来的问题 —&gt; 模块模式实现的原理</li>\n<li>保存, 对于一些组件级的变量不适合放在全局上下文中. 通过闭包不会被回收的特性做到保存内部变量 —&gt; 三顾茅庐示例</li>\n</ul>\n<p>闭包的优点:</p>\n<ul>\n<li>保护函数内部变量的安全</li>\n<li>在内存中维持一个变量</li>\n</ul>\n<p>闭包的缺点:<br>闭包的缺点就是占用内存的问题, 因为闭包内容是户常驻内存的. 处理不当 or 大量使用闭包可能是导致爆内存</p>\n<p>js 垃圾回收机制:<br>Javascript中, 如果一个对象不再被引用, 那么这个对象就会被 GC 回收. 如果两个对象互相引用, 而不再被第 3 者所引用, 那么这两个互相引用的对象也会被回收.</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包</a><br><a href=\"https://www.cnblogs.com/shiyou00/p/10598010.html\" target=\"_blank\" rel=\"noopener\">深入学习javaScript闭包(闭包的原理，闭包的作用，闭包与内存管理)</a></p>\n","categories":["前端"],"tags":["interview"]},{"title":"interview-4","url":"/%E5%89%8D%E7%AB%AF/interview/interview-4/","content":"<h2 id=\"推断以下代码执行的结果\"><a href=\"#推断以下代码执行的结果\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!foo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> foo = <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bar()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升</li>\n<li>代码自上而下执行</li>\n<li>函数调用<ul>\n<li>形参赋值</li>\n<li>变量提升, var foo; 提升到函数作用域的顶端</li>\n<li>代码自上而下执行<br>由于代码执行到 if 判断时 foo 已经被声明默认值为 undefined 所以 !foo =&gt; true 最终打印的结果就是 10</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-1\"><a href=\"#推断以下代码执行的结果-1\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        n++</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a()</span><br><span class=\"line\">c()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升</li>\n<li>var n; var c; function a; a = AAAFFF111(内存地址)</li>\n<li>代码由上向下执行</li>\n<li>n = 0</li>\n<li>c = a() 创建私有作用域<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升</li>\n<li>var n; function b; b = BBBFFF111; n = 10;</li>\n<li>b() 创建私有作用<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升 - 无</li>\n<li>代码由上向下执行</li>\n<li>私有变量没有 n 变量 -&gt; 查找父级作用域 n = 10 n++ =&gt; n = 11</li>\n<li>console.log(n) =&gt; 11</li>\n</ul>\n</li>\n<li>返回 b = BBBFFF111 引用赋值给 c 堆内存不得销毁</li>\n</ul>\n</li>\n<li>c() =&gt; b() =&gt; BBBFFF111() 创建私有作用<ul>\n<li>形参赋值 - 无</li>\n<li>私有作用域变量提升 - 无</li>\n<li>代码由上向下执行</li>\n<li>私有变量没有 n 变量 -&gt; 查找父级作用域 n = 11 n++ =&gt; n = 12</li>\n<li>console.log(n) =&gt; 12</li>\n</ul>\n</li>\n<li>console.log(n) =&gt; 0</li>\n</ul>\n<p>经过以上的分析, 本例最终打印的结果为 11, 12, 0</p>\n<h2 id=\"推断以下代码执行的结果-2\"><a href=\"#推断以下代码执行的结果-2\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>, b = <span class=\"number\">11</span>, c = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    c = <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行的步骤为</p>\n<ul>\n<li>变量提升 var a, b, c; text = AAAFFF111; a = 10; b = 11; c = 12</li>\n<li>代码自上而下执行</li>\n<li>test(10) 创建私有作用域<ul>\n<li>形参赋值 a = 10</li>\n<li>变量提升 var b</li>\n<li>代码自上而下执行</li>\n<li>a = 1</li>\n<li>b = 2</li>\n<li>c = 3 =&gt; 私有作用域中没有定义 c, 从全局作用域中找到 c 并赋值</li>\n</ul>\n</li>\n<li>console.log(a) =&gt; 10</li>\n<li>console.log(b) =&gt; 11</li>\n<li>console.log(c) =&gt; 3<br>最终执行的结果为 10, 11, 3</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-3\"><a href=\"#推断以下代码执行的结果-3\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!(<span class=\"string\">'a'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 输出 undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码考核的点有两个:</p>\n<ul>\n<li>变量提升, 不管条件是否满足都会提升</li>\n<li>非严格模式下, 在全局作用域创建的变量(使用 var)将会作为 window 的属性</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-4\"><a href=\"#推断以下代码执行的结果-4\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 形参赋值 a = 10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] = <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    a = <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码考核的点为:<br>在非严格模式下, 函数的实参集合与形参变量存在 “映射” 关系, 不管其中一方谁改变了, 另外一个都会跟着改变.<br>严格模式下, 两者之间的映射关系会被切断, 相互之间不会影响</p>\n<p>所以以上代码执行的结果为 10, 10, 100, 1000</p>\n<h2 id=\"推断以下代码执行的结果-5\"><a href=\"#推断以下代码执行的结果-5\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有作用域 x = 1; y = 2, a = 3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span> <span class=\"comment\">// 映射关系</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a = b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// =&gt; undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码考察的点为, 函数没有显式的返回值时默认的返回值是 undefined</p>\n<p>所以执行的结果为 3, 10, undefined</p>\n<h2 id=\"amp-amp-vs\"><a href=\"#amp-amp-vs\" class=\"headerlink\" title=\"&amp;&amp; vs ||\"></a>&amp;&amp; vs ||</h2><ul>\n<li>在条件判断中<ul>\n<li>&amp;&amp;: 一假必假</li>\n<li>||: 一真必真</li>\n</ul>\n</li>\n<li>在赋值操作中<ul>\n<li>A || B =&gt; 如果 A 为真返回 A 的值, 否则返回 B 的值(无论真假)<ul>\n<li>1 || 2 =&gt; 1</li>\n<li>0 ||  false =&gt; false</li>\n</ul>\n</li>\n<li>A &amp;&amp; B =&gt; 如果 A 为假返回 A 的值, 否则返回 B 的值<ul>\n<li>1 &amp;&amp; 2 =&gt; 2</li>\n<li>0 &amp;&amp; false =&gt; 0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>逻辑 &amp;&amp; 的优先级高于 ||<ul>\n<li>0 || 2 &amp;&amp; false || 3 =&gt; 3<ul>\n<li>由于 &amp;&amp; 优先级高, 所以先执行了 2 &amp;&amp; false =&gt; false</li>\n<li>0 || false || 3</li>\n<li>从左向右执行 0 || false =&gt; false</li>\n<li>false || 3 =&gt; 3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推断以下代码执行的结果-6\"><a href=\"#推断以下代码执行的结果-6\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'hello'</span></span><br><span class=\"line\">~(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">foo</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = foo || <span class=\"string\">'world'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;)(foo)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码结果为 hello, hello, hello</p>\n<h2 id=\"推断以下代码执行的结果-7\"><a href=\"#推断以下代码执行的结果-7\" class=\"headerlink\" title=\"推断以下代码执行的结果\"></a>推断以下代码执行的结果</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b + a++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn() <span class=\"comment\">// a = 0 f = function(b)...</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 1 打印 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn()(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 1 打印 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">5</span>)) <span class=\"comment\">// a = 2 打印 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>以上代码执行逻辑如下:<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-08-00-09-06.png\" alt=\"2020-03-08-00-09-06\"></p>\n<p>综上, 打印的结果为 5, 5, 6, 2</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"noopener\">运算符优先级</a></li>\n</ul>\n","categories":["前端"],"tags":["interview"]},{"title":"HTTP 实践","url":"/%E5%89%8D%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP/HTTP%20%E5%AE%9E%E8%B7%B5/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装成功后 <code>nginx</code> 的位置在 <code>/usr/local/etc/nginx</code> 目录下.</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>nginx</code> 命令没有报错说明安装启动成功, 验证方式为浏览器直接访问 <a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">localhost</a> 查看是否成功展示 <code>nginx</code> 欢迎页面</p>\n<a id=\"more\"></a>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><blockquote>\n<p>正式线上配置的 nginx 需要配置 DNS 来把域名指向我们的服务器 IP. 由于本地开发, 直接修改 hosts 即可</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">12.0.0.1 quanquan.com</span><br></pre></td></tr></table></figure>\n\n<p>PS: 每次修改配置文件以后都要执行 <code>nginx -s reload</code> 重启 <code>nginx</code></p>\n<h3 id=\"导入额外配置文件\"><a href=\"#导入额外配置文件\" class=\"headerlink\" title=\"导入额外配置文件\"></a>导入额外配置文件</h3><p>安装 <code>nginx</code> 成功后, 其配置文件的默认配置文件为 <code>/usr/local/etc/nginx/nginx.conf</code> 文件,<br>打开配置文件, 取消 <code>include servers/*;</code> 这一行前边的注释, 就可以随意在 <code>servers</code> 目录下创建配置文件了. 本次笔记中只创建 <code>test.conf</code> 配置文件</p>\n<h3 id=\"配置一个简单的代理服务器\"><a href=\"#配置一个简单的代理服务器\" class=\"headerlink\" title=\"配置一个简单的代理服务器\"></a>配置一个简单的代理服务器</h3><p>编写 nginx 配置文件如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 <code>server</code> 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">request, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(request.headers);</span><br><span class=\"line\">    response.end(<span class=\"string\">'&lt;h1&gt;Hello world&lt;h1&gt;'</span>)</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3333</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'the server is running~'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>服务文件中, 对于所有的请求直接返回了 <code>&lt;h1&gt;Hello world&lt;h1&gt;</code>, 并且打印了请求的头信息, 可以看到以上的代理服务虽然能够成功代理到业务服务但是打印的 HOST 头信息, 变成了代理服务请求的 HOST: 127.0.0.1:3333</p>\n<h3 id=\"修正-HOST-头信息\"><a href=\"#修正-HOST-头信息\" class=\"headerlink\" title=\"修正 HOST 头信息\"></a>修正 HOST 头信息</h3><p>把 location 块修改为以下内容即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:3333;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置代理缓存服务器\"><a href=\"#配置代理缓存服务器\" class=\"headerlink\" title=\"配置代理缓存服务器\"></a>配置代理缓存服务器</h3><p>第一步, 指定缓存信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxy_cache_path &#x2F;Users&#x2F;quanquanluo&#x2F;nginx_cache levels&#x3D;1:2 keys_zone&#x3D;cache:10m max_size&#x3D;10g inactive&#x3D;60m use_temp_path&#x3D;off;</span><br></pre></td></tr></table></figure>\n<p>在此步骤中我们指定了, nginx 缓存的目录重启 nginx 之后会在指定的缓存目录创建一个</p>\n<p>第二步, 把 location 块修改为以下内容即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">    proxy_cache my_cache;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:3333;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>第三步, 升级 <code>server.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sleep = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">2e3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> img = fs.readFileSync(<span class=\"string\">'./test.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"keyword\">async</span> (request, response) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;url&#125; = request</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        response.end(<span class=\"string\">'&lt;h1&gt;Hello world&lt;h1&gt;&lt;img src=\"/test.jpg\" /&gt;'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">'/test.jpg'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> sleep()</span><br><span class=\"line\">        response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'image/jpeg'</span>,</span><br><span class=\"line\">            <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=5, s-maxage=10'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        response.end(img)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response.end()</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3333</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'the server is running~'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第四步, 通过 Vary 字段可以指定只有某个请求头一致的时候才能使用缓存</p>\n<p>示例,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'image/jpeg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=5, s-maxage=10'</span>,</span><br><span class=\"line\">    Vary: <span class=\"string\">'User-Agent'</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上配置指定了只有请求头 <code>User-Agent</code> 一致的时候才能使用缓存. 这个的使用场景就是为相同的终端提供一致的缓存信息</p>\n<h3 id=\"在本地配置-https-服务\"><a href=\"#在本地配置-https-服务\" class=\"headerlink\" title=\"在本地配置 https 服务\"></a>在本地配置 https 服务</h3><p>第一步, 生成证书.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privkey.pem -out localhost-cert.pem</span><br></pre></td></tr></table></figure>\n<p>执行该步骤后, 会在当前目录创建 <code>localhost-privkey.pem</code> <code>localhost-cert.pem</code> 两个文件</p>\n<p>第二步, 修改配置爱文件中的 server 块</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>    path to /localhost-privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>        path to /localhost-cert.pem;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新版的 chrome 中, 自建的证书, 没有了不安全页面的继续访问入口. 所以有了下一步</p>\n<p>第三步, 安装并信任刚刚创建的证书</p>\n<ul>\n<li>在 finder 中找到生成的 localhost-cert.pem 文件并双击</li>\n<li>在钥匙串登录类别中找到创建证书时候输入的证书名字, 我写的是 CN</li>\n<li>双击刚刚安装的证书弹出以下图片, 按照图示设置</li>\n</ul>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-05-15-58-30.png\" alt=\"2020-03-05-15-58-30\"></p>\n<p>至此, 再通过 https 访问 <code>quanquan.com</code> 弹出的不安全页面就可以通过高级, 选择仍要前往了. 本地配置 https 环境完成</p>\n<h3 id=\"访问-http-自动跳转到-https\"><a href=\"#访问-http-自动跳转到-https\" class=\"headerlink\" title=\"访问 http 自动跳转到 https\"></a>访问 http 自动跳转到 https</h3><p>在配置文件中添加以下配置即可</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> [::]:<span class=\"number\">80</span> default_server;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> quanquan.com;</span><br><span class=\"line\">  <span class=\"attribute\">return</span> <span class=\"number\">302</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"升级-http2\"><a href=\"#升级-http2\" class=\"headerlink\" title=\"升级 http2\"></a>升级 http2</h3><p>就这么一句</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">443</span> http2 ssl;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开启-http2-Server-Push\"><a href=\"#开启-http2-Server-Push\" class=\"headerlink\" title=\"开启 http2 Server-Push\"></a>开启 http2 Server-Push</h3><p>第一步, nginx 配置文件 <code>server</code> 块中添加 <code>http2_push_preload on;</code><br>第二步, 升级服务代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (url === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'Link'</span>: <span class=\"string\">'&lt;/test.jpg&gt;; rel=preload; as=image'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    response.end(<span class=\"string\">'&lt;h1&gt;Hello world&lt;h1&gt;&lt;img src=\"/test.jpg\" /&gt;'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>以上代码的意思是当浏览器访问 <code>/</code> 路径时, 主动向浏览器推送 test.jpg</p>\n<p>由于, 自签名的证书构建的 https 会被浏览器标记为不安全的服务, 所以浏览器上看不到效果…</p>\n<p>但是这个语法是没有问题的~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.ruanyifeng.com/blog/2018/03/http2_server_push.html\" target=\"_blank\" rel=\"noopener\">HTTP/2 服务器推送（Server Push）教程</a><br><a href=\"https://www.cnblogs.com/wujiaolong/p/5172e1f7e9924644172b64cb2c41fc58.html\" target=\"_blank\" rel=\"noopener\">HTTP、HTTP2.0、SPDY、HTTPS 你应该知道的一些事</a></p>\n","categories":["前端"],"tags":["HTTP","nginx"]},{"title":"HTTP 基础","url":"/%E5%89%8D%E7%AB%AF/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP/HTTP%20%E5%9F%BA%E7%A1%80/","content":"<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-04-20-55-42.png\" alt=\"2020-03-04-20-55-42\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>HTTP (HyperText Transfer Protocol): 超文本传输协议, 它是建立在 TCP/IP 协议之上的应用层规范. 是互联网上应用最广泛的一种网络协议.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"HTTP-5-层网络模型\"><a href=\"#HTTP-5-层网络模型\" class=\"headerlink\" title=\"HTTP 5 层网络模型\"></a>HTTP 5 层网络模型</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-04-20-46-44.png\" alt=\"2020-03-04-20-46-44\"></p>\n<p>各个层级概述</p>\n<ul>\n<li>物理层, 主要作用是定义物理设备如何连接和传输数据</li>\n<li>数据链路层, 在通信实体间建立数据链路链接</li>\n<li>网络层, 为数据在节点之间传输创建逻辑链路</li>\n<li>传输层, 用于向用户提供端到端(end to end)的服务. 传输层向上层屏蔽了下层数据通信的细节. 例如, 包体过大时的分包问题.</li>\n<li>应用层, 为软件提供服务, 构建与 TCP 协议之上, 向应用软件屏蔽了网络传输相关的细节</li>\n</ul>\n<h2 id=\"HTTP-的发展历史\"><a href=\"#HTTP-的发展历史\" class=\"headerlink\" title=\"HTTP 的发展历史\"></a>HTTP 的发展历史</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-04-20-58-06.png\" alt=\"2020-03-04-20-58-06\"></p>\n<h3 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP / 0.9\"></a>HTTP / 0.9</h3><p>发布于 1991 年, 该版本极其简单.</p>\n<ul>\n<li>只有一个命令 GET</li>\n<li>没有 HEADER 等描述数据的信息</li>\n<li>服务端内容发送完成之后就关闭 TCP 链接</li>\n</ul>\n<h3 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP / 1.0\"></a>HTTP / 1.0</h3><ul>\n<li>任何格式的内容都可以发送, 使得互联网不仅能传递文字还能传输图片 / 视频 / 二进制文件, 为互联网的大发展奠定了基础</li>\n<li>增加了 POST / PUT / HEADER 等命令</li>\n<li>增加了 status code 和 header 相关内容.</li>\n<li>增加了多字符集的支持, 多部分发送(multi-part), 权限(authorization), 缓存(cache), 内容编码(content encoding)等</li>\n</ul>\n<p>HTTP / 1.0 的缺点, 就是每个 TCP 链接只能发送一个请求. 数据发送完毕就会断开 TCP 链接, 如果需要请求其他资源就需要重新创建 TCP 链接</p>\n<h3 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP / 1.1\"></a>HTTP / 1.1</h3><ul>\n<li>持久链接, 设置 TCP 链接在数据发送完成后默认不关闭, 可以被后续的请求复用. 解决了 1.0 版本中的问题. 客户端或者服务端发现对方一段时间没有活动就可以主动关闭链接. 规范的做法是, 客户端在最后一个请求时发送<code>Connection: close</code> 明确通知服务器关闭 TCP 链接</li>\n<li>增加了管道机制, 可以在一个 TCP 链接里发送多个 http 请求, 但是在 1.1 版本中虽然可以在同一个 TCP 链接里发送多个 http 请求, 但是服务器对于进来的请求时按照顺序进行数据返回的. 如果前一个请求等待时间非常长, 而后一个请求处理得比较快. 这个时候后一个请求不能先发送, 而是要等第一个请求数据全部发送完成之后, 才能进行发送. 即是串行的.</li>\n<li>增加了 HOST 头, 有了 HOST 之后就可以在一台服务器(物理机)上同时跑多个 web 服务, 提升了物理机的利用率</li>\n</ul>\n<h3 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP / 2\"></a>HTTP / 2</h3><ul>\n<li>所有数据都以二进制传输, 在 HTTP/1.1 里面大部分的数据传输是通过字符串, 所以数据的分片方式是不太一样的. 在 HTTP/2 里面所有的数据都是以帧进行传输的</li>\n<li>同一个连接里面发送多个请求时, 服务器端不再需要按照顺序来返回处理后的数据. 而是可以在返回第一个请求里面数据的时候, 同时返回第二个请求里面的数据. 这样的并行传输能够更大限度地提高 web 应用的传输效率</li>\n<li>新增头信息压缩, 有效减少带宽使用</li>\n<li>新增推送等功能, HTTP/2之前, 只能由客户端发送数据, 服务器端返回数据. 客户端是主动方, 服务器端永远是被动方. 在 HTTP/2 里面有了 “推送” 的概念, 也就是说服务器端可以主动向客户端发起一些数据传输</li>\n<li>HTTP/2 其实主要就是改善了 HTTP/1.1 里面造成性能低下的一些问题</li>\n</ul>\n<p>推送功能实例, 一个web页面加载时会要求一些html, css, js等文件, css和js文件是以链接的形式在 html 文本里面显示的, 只有通过浏览器解析了 html 里面的内容之后, 才能根据链接里面包含的URL地址去请求对应的 css 和 js 文件.<br>在HTTP/2之前, 这个传输过程会包含顺序问题, 需要先请求到 html 的文件, 通过浏览器运行解析这个 html 文件之后, 才能去发送 css 的请求和 js 的请求.<br>HTTP/2 中有了推送功能之后, 在请求 html 的同时, 服务器端可以主动把 html 里面所引用到的 css 和 js 文件推送到客户端, 这样html, css 和 js 的发送就是并行的而不是串行的</p>\n<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-04-21-47-22.png\" alt=\"2020-03-04-21-47-22\"></p>\n<h2 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h2><ul>\n<li>public, 请求发送过程中的任何一个环节(如, 代理服务器)都可以缓存请求的内容</li>\n<li>private, 只有发起请求的浏览器能够缓存请求的内容</li>\n<li>no-cache, 可以存储请求的内容, 但是缓存的内容是否可用需要向服务器发请求查询. no-cache的响应实际是可以存储在本地缓存中的, 只是在与原始服务器进行新鲜度再验证之前, 缓存不能将其提供给客户端使用</li>\n<li>no-store, 禁用缓存, 禁止本地和代理服务器缓存请求的文件</li>\n<li>max-age = <second> 缓存到期时间</li>\n<li>s-maxage = <second> 代理服务器上缓存的内容过期时间</li>\n<li>max-stale = <second> 即使缓存已经过了有效期, 但是仍然可以使用缓存(浏览器中用不到)</li>\n<li>must-revalidate, 缓存必须在使用之前验证旧资源的状态, 并且不可使用过期资源. 表示如果页面过期, 则去服务器进行获取</li>\n<li>proxy-revalidate, 与must-revalidate作用相同, 但它仅适用于共享缓存(例如代理), 并被私有缓存忽略</li>\n<li>no-transform, 静止代理服务器修改请求信息</li>\n</ul>\n<h2 id=\"其他内容\"><a href=\"#其他内容\" class=\"headerlink\" title=\"其他内容\"></a>其他内容</h2><ul>\n<li>数据协商 Accept / Content-Type 这些</li>\n<li>Redirect (301 from disk cache, 302, 307 / POST)</li>\n<li>CSP(content security policy)</li>\n</ul>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.cnblogs.com/kevingrace/p/10459429.html\" target=\"_blank\" rel=\"noopener\">Nginx下关于缓存控制字段cache-control的配置说明</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\" target=\"_blank\" rel=\"noopener\">Cache-Control</a></p>\n","categories":["前端"],"tags":["HTTP","nginx"]},{"title":"interview-3","url":"/%E5%89%8D%E7%AB%AF/interview/interview-3/","content":"<h2 id=\"关于DOMContentLoaded和load事件说法正确的是\"><a href=\"#关于DOMContentLoaded和load事件说法正确的是\" class=\"headerlink\" title=\"关于DOMContentLoaded和load事件说法正确的是\"></a>关于DOMContentLoaded和load事件说法正确的是</h2><p>DOMContentLoaded事件比load事件更早执行</p>\n<p>当纯HTML被完全加载以及解析时, DOMContentLoaded 事件会被触发, 而不必等待样式表, 图片或者子框架完成加载</p>\n<p>load 事件仅仅应该在探测到整个页面完全加载完成时被使用. 一个常见的错误就是在该使用 DOMContentLoaded 的地方使用了load</p>\n<a id=\"more\"></a>\n\n<h2 id=\"innerHTML-vs-innerText-vs-outerHTML-vs-outerText\"><a href=\"#innerHTML-vs-innerText-vs-outerHTML-vs-outerText\" class=\"headerlink\" title=\"innerHTML vs innerText vs outerHTML vs outerText\"></a>innerHTML vs innerText vs outerHTML vs outerText</h2><ul>\n<li>innerHTML 设置或者获取标签所包含的 HTML 与文本信息, 不含标签本身</li>\n<li>innerText 设置或者获取标签所包含的文本信息, 不含标签本身</li>\n<li>outerHTML 设置或获取标签本身以及所包含的 HTML 与文本信息, 包含本身</li>\n<li>outerText 设置或获取标签本身以及所包含的文本信息, 包含本身</li>\n</ul>\n<p>示例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"div\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'div.innerHTML'</span>, div.innerHTML);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'div.innerText'</span>, div.innerText);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'div.outerHTML'</span>, div.outerHTML);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'div.outerText'</span>, div.outerText);</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 控制台打印的结果为</span></span><br><span class=\"line\"><span class=\"comment\">div.innerHTML &lt;p&gt;this is text&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">index.html:5 div.innerText this is text</span></span><br><span class=\"line\"><span class=\"comment\">index.html:6 div.outerHTML &lt;div id=\"div1\"&gt;&lt;p&gt;this is text&lt;/p&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">index.html:7 div.outerText this is text</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块级元素-vs-行内元素\"><a href=\"#块级元素-vs-行内元素\" class=\"headerlink\" title=\"块级元素 vs 行内元素\"></a>块级元素 vs 行内元素</h2><h3 id=\"HTML-将标签分为容器级和文本级\"><a href=\"#HTML-将标签分为容器级和文本级\" class=\"headerlink\" title=\"HTML 将标签分为容器级和文本级\"></a>HTML 将标签分为容器级和文本级</h3><h4 id=\"容器级\"><a href=\"#容器级\" class=\"headerlink\" title=\"容器级\"></a>容器级</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">div  h  li dl dd dt ul li</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文本级\"><a href=\"#文本级\" class=\"headerlink\" title=\"文本级\"></a>文本级</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">p b a span em i u</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSS-将标签分为块级元素和行内元素\"><a href=\"#CSS-将标签分为块级元素和行内元素\" class=\"headerlink\" title=\"CSS 将标签分为块级元素和行内元素\"></a>CSS 将标签分为块级元素和行内元素</h3><h4 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">div h li p dd dt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a b span em u i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS-权重列表\"><a href=\"#CSS-权重列表\" class=\"headerlink\" title=\"CSS 权重列表\"></a>CSS 权重列表</h2><table>\n<thead>\n<tr>\n<th>权重</th>\n<th>选择器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10000</td>\n<td>!important</td>\n</tr>\n<tr>\n<td>1000</td>\n<td>内联样式</td>\n</tr>\n<tr>\n<td>100</td>\n<td>id 选择器</td>\n</tr>\n<tr>\n<td>10</td>\n<td>类 / 伪类 / 属性选择器</td>\n</tr>\n<tr>\n<td>1</td>\n<td>标签 / 伪元素选择器</td>\n</tr>\n<tr>\n<td>0</td>\n<td>通用选择器 * / 子选择器 &gt; / 相邻选择器 + / 同胞选择器 ~</td>\n</tr>\n</tbody></table>\n<h2 id=\"伪元素和伪类\"><a href=\"#伪元素和伪类\" class=\"headerlink\" title=\"伪元素和伪类\"></a>伪元素和伪类</h2><p>总结了一篇文章在<a href=\"https://note.niubishanshan.top/%E5%89%8D%E7%AB%AF/CSS/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/\">这里</a></p>\n<h2 id=\"1-gt-gt-gt-32-的值为\"><a href=\"#1-gt-gt-gt-32-的值为\" class=\"headerlink\" title=\"-1 &gt;&gt;&gt; 32 的值为\"></a>-1 &gt;&gt;&gt; 32 的值为</h2><h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p><code>&gt;&gt;</code> 这个是带符号右移<br><code>&gt;&gt;&gt;</code> 这个是无符号右移</p>\n<blockquote>\n<p>按二进制形式把所有的数字向右移动对应位数, 低位移出(舍弃), 高位的空位补零. 对于正数来说和带符号右移()&gt;&gt;)相同, 但是对于负数来说不同</p>\n</blockquote>\n<h4 id=\"正数\"><a href=\"#正数\" class=\"headerlink\" title=\"正数\"></a>正数</h4><p>例: 20 &gt;&gt; 2</p>\n<ul>\n<li>首先, 把原数转化成二进制. 20 的二进制为: 0001 0100</li>\n<li>其次, 将二进制数向右移动两位, 高伟补符号位(0). 得到 0000 0101</li>\n<li>最后, 将二进制转化为十进制数, 0000 0101 转化为十进制为 5 (parseInt(‘00000101’, 2) =&gt; 5)</li>\n<li>所以, 20 &gt;&gt; 2 = 5</li>\n</ul>\n<h4 id=\"负数\"><a href=\"#负数\" class=\"headerlink\" title=\"负数\"></a>负数</h4><p>例: -20 &gt;&gt; 2</p>\n<ul>\n<li>首先, 把原数转化成二进制<ul>\n<li>取反加1 (负数转二进制步骤)</li>\n<li>20 的二进制为 0001 0100</li>\n<li>取反得到 1110 1011</li>\n<li>加1后得到 1110 1100</li>\n</ul>\n</li>\n<li>其次, 将二进制向右移动两位. 高位补符号位 1, 得到 1111 1011</li>\n<li>最后, 将二进制数转化为十进制数<ul>\n<li>取反 -&gt; 0000 0100</li>\n<li>加 1 -&gt; 0000 0101</li>\n<li>因为是负数 -&gt; 1000 0101</li>\n<li>2 的 2 次方加 2 的 0 次方 -&gt; -5</li>\n</ul>\n</li>\n<li>所以, -20 &gt;&gt; 2 = -5</li>\n</ul>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\" target=\"_blank\" rel=\"noopener\">按位操作符</a></p>\n","categories":["前端"],"tags":["interview"]},{"title":"伪类和伪元素","url":"/%E5%89%8D%E7%AB%AF/CSS/%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/","content":"<blockquote>\n<p>伪类和伪元素是为了格式化文档以外的信息, 也就是说, 伪类和伪元素是用来修饰不在文档树中的部分. 比如, 一句话中的第一个字母, 或者是列表中的第一个元素…</p>\n</blockquote>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><p>伪类用于当已有元素处于的某个状态时, 为其添加对应的样式, 这个状态是根据用户行为而动态变化的.</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-02-22-34-04.png\" alt=\"2020-03-02-22-34-04\"></p>\n<h2 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h2><p>伪元素用于创建一些不在文档树中的元素, 并为其添加样式</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-02-22-34-56.png\" alt=\"2020-03-02-22-34-56\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h2><h3 id=\"例一\"><a href=\"#例一\" class=\"headerlink\" title=\"例一\"></a>例一</h3><p>假设有这样的 html 片段</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想要给第一项添加样式, 需要给第一项添加一个类, 并在该类中定义对应的样式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.first</span> &#123;</span></span><br><span class=\"line\">        color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其实还可以利用伪类选择器来选择第一个元素 <code>:first-child</code> 为其添加样式.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例二\"><a href=\"#例二\" class=\"headerlink\" title=\"例二\"></a>例二</h3><p>假设有以下 HTML 代码段</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果想要给该段落的第一个字母添加样式, 可以添加一个标签包裹第一个元素, 例如:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>H<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>ello World!</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    span &#123;</span><br><span class=\"line\">        color: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不创建这个元素, 还可以使用 <code>:first-letter</code> 伪元素来为其添加样式. 这个时候, 看起来像是创建了一个虚拟的 <code>span</code> 元素并添加了样式, 但实际上文档树中并没有 <code>span</code> 这个元素</p>\n<p>从上述例子中可以看出, 伪类的操作对象是文档树中已有的元素, 而伪元素则创建了一个文档树外的元素. 伪类与伪元素的区别在于: 有没有创建一个文档树之外的元素</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://www.w3school.com.cn/css/css_pseudo_elements.asp\" target=\"_blank\" rel=\"noopener\">CSS 伪元素</a></li>\n<li><a href=\"https://www.w3school.com.cn/css/css_pseudo_classes.asp\" target=\"_blank\" rel=\"noopener\">CSS 伪类 (Pseudo-classes)</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener\">伪类</a></li>\n<li><a href=\"https://www.cnblogs.com/ihardcoder/p/5294927.html\" target=\"_blank\" rel=\"noopener\">CSS3伪类和伪元素的特性和区别</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_42420703/article/details/84863556\" target=\"_blank\" rel=\"noopener\">伪类和伪元素的区别</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/46909886\" target=\"_blank\" rel=\"noopener\">CSS中伪类与伪元素，你弄懂了吗？</a></li>\n<li><a href=\"https://www.cnblogs.com/ammyben/p/8012747.html\" target=\"_blank\" rel=\"noopener\">伪类与伪元素的区别</a></li>\n<li><a href=\"http://www.javanx.cn/20180928/css-selector/\" target=\"_blank\" rel=\"noopener\">CSS选择器如此之多，你了解多少？</a></li>\n</ul>\n","categories":["前端"],"tags":["CSS"]},{"title":"Cookie","url":"/%E5%89%8D%E7%AB%AF/basic-js/cookie/","content":"<h2 id=\"添加一条-cookie\"><a href=\"#添加一条-cookie\" class=\"headerlink\" title=\"添加一条 cookie\"></a>添加一条 cookie</h2><h3 id=\"简单粗暴的方法\"><a href=\"#简单粗暴的方法\" class=\"headerlink\" title=\"简单粗暴的方法\"></a>简单粗暴的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie=<span class=\"string\">\"key=quanquan\"</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"文艺一点的方法\"><a href=\"#文艺一点的方法\" class=\"headerlink\" title=\"文艺一点的方法\"></a>文艺一点的方法</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\">key, value, expiresHours</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = key + <span class=\"string\">\"=\"</span> + value</span><br><span class=\"line\">    <span class=\"comment\">//判断是否设置过期时间, 0代表关闭浏览器时失效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiresHours &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now() + expiresHours * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">        cookie = cookie + <span class=\"string\">\"; expires=\"</span> + date.toGMTString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除指定的-cookie\"><a href=\"#删除指定的-cookie\" class=\"headerlink\" title=\"删除指定的 cookie\"></a>删除指定的 cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCookie</span> (<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now() - <span class=\"number\">1</span>) <span class=\"comment\">// 过去的时间</span></span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = key + <span class=\"string\">\"=value; expires=\"</span> + date.toGMTString() <span class=\"comment\">// 此时这条记录就已经是过期的啦</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新指定的-cookie\"><a href=\"#更新指定的-cookie\" class=\"headerlink\" title=\"更新指定的 cookie\"></a>更新指定的 cookie</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">modify</span>(<span class=\"params\">key, value, expiresHours</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cookie = key + <span class=\"string\">\"=\"</span> + value</span><br><span class=\"line\">    <span class=\"comment\">//判断是否设置过期时间,0代表关闭浏览器时失效</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiresHours &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now() + expiresHours * <span class=\"number\">3600</span> * <span class=\"number\">1000</span>) <span class=\"comment\">// 设置失效时间, 单位为小时</span></span><br><span class=\"line\">        cookie = cookie + <span class=\"string\">\"; expires=\"</span> + date.toGMTString()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.cookie = cookie</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取指定的-cookie-的值\"><a href=\"#获取指定的-cookie-的值\" class=\"headerlink\" title=\"获取指定的 cookie 的值\"></a>获取指定的 cookie 的值</h2><h3 id=\"把-cookie-转化成一个对象获取对象的值\"><a href=\"#把-cookie-转化成一个对象获取对象的值\" class=\"headerlink\" title=\"把 cookie 转化成一个对象获取对象的值\"></a>把 cookie 转化成一个对象获取对象的值</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieMap = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cookie.length) &#123;</span><br><span class=\"line\">        c = cookie.split(<span class=\"string\">'; '</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; c.length; i++) &#123;</span><br><span class=\"line\">            cookieMap[c[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">0</span>].trim()] = c[i].split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>].trim()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieMap[key] || <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切断-cookie-遍历数组找到同名-key-直接返回\"><a href=\"#切断-cookie-遍历数组找到同名-key-直接返回\" class=\"headerlink\" title=\"切断 cookie 遍历数组找到同名 key 直接返回\"></a>切断 cookie 遍历数组找到同名 key 直接返回</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieArr = cookie.split(<span class=\"string\">\"; \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cookieArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = cookieArr[i].split(<span class=\"string\">\"=\"</span>).map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i.trim())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr[<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生猛的使用字符串截取\"><a href=\"#生猛的使用字符串截取\" class=\"headerlink\" title=\"生猛的使用字符串截取\"></a>生猛的使用字符串截取</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> search = key + <span class=\"string\">\"=\"</span> <span class=\"comment\">//查询检索的值</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> returnValue = <span class=\"string\">\"\"</span>; <span class=\"comment\">//返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.cookie.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> start = <span class=\"built_in\">document</span>.cookie.indexOf(search);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            start += search.length;</span><br><span class=\"line\">            end = <span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">\";\"</span>, start);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end == <span class=\"number\">-1</span>) end = <span class=\"built_in\">document</span>.cookie.length;</span><br><span class=\"line\">            returnValue = <span class=\"built_in\">document</span>.cookie.substring(start, end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正则匹配\"><a href=\"#正则匹配\" class=\"headerlink\" title=\"正则匹配\"></a>正则匹配</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^| )\"</span> + key + <span class=\"string\">\"=([^;]*)(;|$)\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr = <span class=\"built_in\">document</span>.cookie.match(reg))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCookie</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookie = <span class=\"built_in\">document</span>.cookie</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cookieMap = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/([^=; ]*)=([^; ]*)/g</span></span><br><span class=\"line\">    cookie.replace(reg, (...args) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [, k, v] = args</span><br><span class=\"line\">        cookieMap[k] = v</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cookieMap[key] || <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["前端"],"tags":["Cookie"]},{"title":"文件操作漏洞","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%BC%8F%E6%B4%9E/","content":"<h2 id=\"常见的文件操作\"><a href=\"#常见的文件操作\" class=\"headerlink\" title=\"常见的文件操作\"></a>常见的文件操作</h2><h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>上传头像</li>\n<li>上传附件</li>\n</ul>\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>下载应用</li>\n<li>下载附件</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"文件操作漏洞\"><a href=\"#文件操作漏洞\" class=\"headerlink\" title=\"文件操作漏洞\"></a>文件操作漏洞</h2><h3 id=\"文件上传-1\"><a href=\"#文件上传-1\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>上传 webshell</li>\n<li>上传木马</li>\n</ul>\n<h3 id=\"文件下载-1\"><a href=\"#文件下载-1\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>下载系统任意文件</li>\n<li>下载程序代码</li>\n<li>下载配置文件</li>\n</ul>\n<h2 id=\"文件上传漏洞\"><a href=\"#文件上传漏洞\" class=\"headerlink\" title=\"文件上传漏洞\"></a>文件上传漏洞</h2><h3 id=\"正常上传流程\"><a href=\"#正常上传流程\" class=\"headerlink\" title=\"正常上传流程\"></a>正常上传流程</h3><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-54-25.png\" alt=\"2020-03-01-17-54-25\"></p>\n<h3 id=\"恶意文件上传\"><a href=\"#恶意文件上传\" class=\"headerlink\" title=\"恶意文件上传\"></a>恶意文件上传</h3><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-55-12.png\" alt=\"2020-03-01-17-55-12\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-55-30.png\" alt=\"2020-03-01-17-55-30\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-55-48.png\" alt=\"2020-03-01-17-55-48\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-56-01.png\" alt=\"2020-03-01-17-56-01\"></p>\n<h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>可以上传可执行脚本</li>\n<li>脚本拥有执行权限</li>\n</ul>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-57-58.png\" alt=\"2020-03-01-17-57-58\"></p>\n<h2 id=\"任意文件下载漏洞\"><a href=\"#任意文件下载漏洞\" class=\"headerlink\" title=\"任意文件下载漏洞\"></a>任意文件下载漏洞</h2><p>正常下载<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-58-59.png\" alt=\"2020-03-01-17-58-59\"></p>\n<p>异常下载<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-59-40.png\" alt=\"2020-03-01-17-59-40\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-59-58.png\" alt=\"2020-03-01-17-59-58\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-00-51.png\" alt=\"2020-03-01-18-00-51\"></p>\n<h3 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h3><ul>\n<li>代码泄露</li>\n<li>数据库配置文件泄露</li>\n<li>系统文件泄露</li>\n</ul>\n<h3 id=\"前提-1\"><a href=\"#前提-1\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li>未验证下载文件格式</li>\n<li>未限制请求路径</li>\n</ul>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-03-46.png\" alt=\"2020-03-01-18-03-46\"></p>\n<h2 id=\"文件包含漏洞\"><a href=\"#文件包含漏洞\" class=\"headerlink\" title=\"文件包含漏洞\"></a>文件包含漏洞</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>本地文件包含</li>\n<li>远程文件包含</li>\n</ul>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-06-20.png\" alt=\"2020-03-01-18-06-20\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-06-42.png\" alt=\"2020-03-01-18-06-42\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-06-59.png\" alt=\"2020-03-01-18-06-59\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-07-09.png\" alt=\"2020-03-01-18-07-09\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-18-07-34.png\" alt=\"2020-03-01-18-07-34\"></p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"命令注入","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/","content":"<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-12-07.png\" alt=\"2020-03-01-17-12-07\"></p>\n<a id=\"more\"></a>\n\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看本地网络</td>\n<td>ipconfig</td>\n</tr>\n<tr>\n<td>查看系统用户</td>\n<td>net user</td>\n</tr>\n<tr>\n<td>查看目录</td>\n<td>dir “{path}”</td>\n</tr>\n<tr>\n<td>字符串查找</td>\n<td>find ‘hello’ ./text.txt (在 text.txt 文件中查找 hello 的行)</td>\n</tr>\n</tbody></table>\n<h3 id=\"复合命令\"><a href=\"#复合命令\" class=\"headerlink\" title=\"复合命令\"></a>复合命令</h3><p>命令拼接 <strong>&amp;</strong> 依次执行拼接的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo 'hello' &amp; echo 'world'</span><br><span class=\"line\"></span><br><span class=\"line\">hello</span><br><span class=\"line\">world</span><br></pre></td></tr></table></figure>\n\n<p>管道符 <strong>|</strong> 依次执行拼接的命令, 前边命令的输出作为后边命令的输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipconfig | find 'IPv4'</span><br><span class=\"line\"></span><br><span class=\"line\">各种 IPv4 的 ip 地址</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"假传圣旨-图例\"><a href=\"#假传圣旨-图例\" class=\"headerlink\" title=\"假传圣旨(图例)\"></a>假传圣旨(图例)</h3><p>正常流程<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-22-19.png\" alt=\"2020-03-01-17-22-19\"></p>\n<p>修改后的流程<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-23-43.png\" alt=\"2020-03-01-17-23-43\"></p>\n<h2 id=\"命令注入原理\"><a href=\"#命令注入原理\" class=\"headerlink\" title=\"命令注入原理\"></a>命令注入原理</h2><h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li>调用可执行系统命令的函数</li>\n<li>函数或者函数的参数可控</li>\n<li>拼接注入命令</li>\n</ul>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><ul>\n<li>客户端构造命令, 并发送到服务端</li>\n<li>服务端拼接命令并执行明林</li>\n<li>命令执行的结果返回给 web 端</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>php 代码<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-27-27.png\" alt=\"2020-03-01-17-27-27\"></p>\n<p>前端交互<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-27-59.png\" alt=\"2020-03-01-17-27-59\"></p>\n<h2 id=\"参数可控示例\"><a href=\"#参数可控示例\" class=\"headerlink\" title=\"参数可控示例\"></a>参数可控示例</h2><p>php 代码<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-29-12.png\" alt=\"2020-03-01-17-29-12\"></p>\n<p>前端交互<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-30-17.png\" alt=\"2020-03-01-17-30-17\"></p>\n<p>执行攻击的流程<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-32-05.png\" alt=\"2020-03-01-17-32-05\"></p>\n<p>执行结果<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-32-37.png\" alt=\"2020-03-01-17-32-37\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>进行命令注入攻击时, url 中的 &amp; 要进行 urlEncode. 否则会被认为是一个参数分隔符</p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"SQL 注入","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/SQL-%E6%B3%A8%E5%85%A5/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>SQL 注入, 又叫 SQL Injection. 是一种常见的 web 安全漏洞. 是指 web 应用程序对用户输入数据的合法性没有判断或过滤不严, 攻击者可以在 web 应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句, 在管理员不知情的情况下实现非法操作, 以此来实现欺骗数据库服务器执行非授权的任意查询, 从而进一步得到相应的数据信息的攻击方式</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-17-02-49.png\" alt=\"2020-03-01-17-02-49\"></p>\n<h2 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h2><p><strong>数据</strong>和<strong>代码</strong>未分离, 把数据当成代码来执行了…</p>\n<h2 id=\"万能密码\"><a href=\"#万能密码\" class=\"headerlink\" title=\"万能密码\"></a>万能密码</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>正常用户登录过程<br>前端交互<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-16-51-26.png\" alt=\"2020-03-01-16-51-26\"></p>\n<p>后端处理逻辑<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-16-57-56.png\" alt=\"2020-03-01-16-57-56\"></p>\n<p>黑客的登录过程<br>前端交互<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-16-52-24.png\" alt=\"2020-03-01-16-52-24\"></p>\n<p>后端处理逻辑<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-16-59-33.png\" alt=\"2020-03-01-16-59-33\"></p>\n<p>两者对比<br><img src=\"http://handle-note-img.niubishanshan.top/2020-03-01-16-53-04.png\" alt=\"2020-03-01-16-53-04\"></p>\n<h3 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h3><ul>\n<li>获取用户请求参数</li>\n<li>将用户端发来的请求参数直接用于拼接 SQL</li>\n<li>执行 SQL</li>\n</ul>\n<h3 id=\"必备条件\"><a href=\"#必备条件\" class=\"headerlink\" title=\"必备条件\"></a>必备条件</h3><ul>\n<li>可以控制的输入数据</li>\n<li>服务器要执行的代码拼接了控制的数据</li>\n</ul>\n<h2 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h2><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><ul>\n<li>获取管理员 or 其他用户的用户名密码等敏感信息</li>\n<li>拖库</li>\n</ul>\n<h3 id=\"获取服务器权限\"><a href=\"#获取服务器权限\" class=\"headerlink\" title=\"获取服务器权限\"></a>获取服务器权限</h3><ul>\n<li>植入webshell, 获取服务器后门</li>\n<li>读取服务器敏感文件</li>\n<li>万能密码</li>\n<li>…</li>\n</ul>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"interview-2","url":"/%E5%89%8D%E7%AB%AF/interview/interview-2/","content":"<h2 id=\"输出的结果是？为什么\"><a href=\"#输出的结果是？为什么\" class=\"headerlink\" title=\"[] == [] 输出的结果是？为什么\"></a>[] == [] 输出的结果是？为什么</h2><p>返回 false</p>\n<p>原因:</p>\n<ul>\n<li>字符串与数字之间的比较: 字符串 -&gt; 数字</li>\n<li>其他类型与布尔值之间的比较: 布尔值先转成数字在比较</li>\n<li>null 和 undefined 比较: 两者相等</li>\n<li>对象和非对象(非布尔值)之间的比较: 对象先调用 ToPrimitive 方法</li>\n</ul>\n<p>问题中, 由于 [] == [] 双等号边都是 [], 属于对象类型, 所以直接比较其值, 不进行隐式类型转换. 且两者都是引用类型, 比价其引用地址位置. 故不相等</p>\n<p>然而, [] == ![] =&gt; true 套用以上的公式就可以得出了</p>\n<a id=\"more\"></a>\n\n<h2 id=\"请说出三种减少网页加载时间的方法\"><a href=\"#请说出三种减少网页加载时间的方法\" class=\"headerlink\" title=\"请说出三种减少网页加载时间的方法\"></a>请说出三种减少网页加载时间的方法</h2><ul>\n<li>尽量减少页面中重复http请求数量</li>\n<li>服务器开启gzip压缩</li>\n<li>css样式的定义放置在文件的头部</li>\n<li>JavaScript脚本放置在文件末尾</li>\n<li>压缩合并JavaScript.css代码</li>\n<li>使用多域名负载网页内的多个文件.图片</li>\n<li>合理利用缓存</li>\n</ul>\n<h2 id=\"CSS-中-box-sizing-有哪些值-区别是什么\"><a href=\"#CSS-中-box-sizing-有哪些值-区别是什么\" class=\"headerlink\" title=\"CSS 中 box-sizing 有哪些值?区别是什么\"></a>CSS 中 box-sizing 有哪些值?区别是什么</h2><p>box-sizing 定义了用户应该如何计算盒子的宽度和高度, 属性值有两个</p>\n<ul>\n<li>content-box (默认值), 其中设置的 width 和 height 只包含内容的宽度和高度, 但是不包含内边距(padding) 边框(border) 和 外边距(margin)</li>\n<li>border-box 设置的 width 和 height 包含了内容的宽度和高度, 同时包含了内边距(padding) 边框(border), 不包含外边距(margin)</li>\n<li>inherit 规定应从父元素继承 box-sizing 属性的值</li>\n</ul>\n<h2 id=\"DOM-Tree-与-Render-Tree-之间的区别是什么\"><a href=\"#DOM-Tree-与-Render-Tree-之间的区别是什么\" class=\"headerlink\" title=\"DOM Tree 与 Render Tree 之间的区别是什么\"></a>DOM Tree 与 Render Tree 之间的区别是什么</h2><p>DOM Tree: 包含了所有的 HTML 标签, 包括 display: none 的元素, JS动态添加的元素等.<br>Render Tree: DOM Tree 和样式结构体结合后构建呈现 Render Tree. Render Tree 能识别样式, 每个 node 都有自己的style, 且不包含隐藏的节点(比如 display: none 的节点)</p>\n<h2 id=\"在Javascript中什么情况下会进行装箱-拆箱转换\"><a href=\"#在Javascript中什么情况下会进行装箱-拆箱转换\" class=\"headerlink\" title=\"在Javascript中什么情况下会进行装箱/拆箱转换\"></a>在Javascript中什么情况下会进行装箱/拆箱转换</h2><p>装箱: 把基本数据类型转化为引用数据类型的操作<br>拆箱: 把引用数据类型转化为基本数据类型的操作, 通过 toString, valueOf 方法实现<br>在 Javascript 中出现基本数据类型数据和引用数据类型数据要进行转换的情况下会进行装箱/拆箱操作</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://book.douban.com/subject/26854244/\" target=\"_blank\" rel=\"noopener\">你不知道的JavaScript（中卷）</a></p>\n","categories":["前端"],"tags":["interview"]},{"title":"interview-1","url":"/%E5%89%8D%E7%AB%AF/interview/interview-1/","content":"<h2 id=\"请列举几个HTML5语义化标签，并说说语义化有什么优点\"><a href=\"#请列举几个HTML5语义化标签，并说说语义化有什么优点\" class=\"headerlink\" title=\"请列举几个HTML5语义化标签，并说说语义化有什么优点\"></a>请列举几个HTML5语义化标签，并说说语义化有什么优点</h2><p>语义化标签:</p>\n<p>页面结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">header</span><br><span class=\"line\">nav</span><br><span class=\"line\">main   只能拥有一个</span><br><span class=\"line\">footer</span><br></pre></td></tr></table></figure>\n\n<p>内容划分:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">blockquoto</span><br><span class=\"line\">section</span><br><span class=\"line\">article</span><br><span class=\"line\">aside</span><br><span class=\"line\">code</span><br><span class=\"line\">abbr</span><br></pre></td></tr></table></figure>\n\n<p>语义化标签的优点:</p>\n<ol>\n<li>代码结构清晰, 方便阅读, 有利于团队合作</li>\n<li>细粒度内容区域通过标签选择器确定 css 元素, 减少选择器创建</li>\n<li>方便其他设备解析(如屏幕阅读器 盲人阅读器 移动设备)</li>\n<li>有利于搜索引擎优化(SEO)</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"请列举几种除了px外的CSS度量单位并解释其含义\"><a href=\"#请列举几种除了px外的CSS度量单位并解释其含义\" class=\"headerlink\" title=\"请列举几种除了px外的CSS度量单位并解释其含义\"></a>请列举几种除了px外的CSS度量单位并解释其含义</h2><h3 id=\"相对单位\"><a href=\"#相对单位\" class=\"headerlink\" title=\"相对单位\"></a>相对单位</h3><ul>\n<li>px</li>\n<li>em</li>\n<li>rem</li>\n<li>ex</li>\n<li>%</li>\n</ul>\n<h3 id=\"绝对单位\"><a href=\"#绝对单位\" class=\"headerlink\" title=\"绝对单位\"></a>绝对单位</h3><ul>\n<li>cm</li>\n<li>pt</li>\n<li>in</li>\n<li>pc</li>\n<li>mm</li>\n</ul>\n<h3 id=\"具体含义\"><a href=\"#具体含义\" class=\"headerlink\" title=\"具体含义\"></a>具体含义</h3><h4 id=\"px\"><a href=\"#px\" class=\"headerlink\" title=\"px\"></a>px</h4><p>像素(Pixel). 是屏幕上显示数据的最基本的点. windows 用户使用的分辨率一般为 96 像素/英寸, mac 用户使用的分辨率一般为 72 像素/英寸</p>\n<h4 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h4><p>相对于当前元素内文本的字体尺寸, 如果当前元素内文本尺寸没有人为设置, 则相对于浏览器默认的字体尺寸, 1em === 100% 可以结合 css 的继承关系使用. 具有灵活性</p>\n<h4 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h4><p>相对于根元素(html 元素)内文本的字体尺寸, 如果当前元素内文本尺寸没有人为设置, 则相对于浏览器默认的字体尺寸</p>\n<h4 id=\"ex\"><a href=\"#ex\" class=\"headerlink\" title=\"ex\"></a>ex</h4><p>相对于 “x” 的高度, 此高度通常为字体高度的一半</p>\n<h4 id=\"pt\"><a href=\"#pt\" class=\"headerlink\" title=\"pt\"></a>pt</h4><p>点(Point), 印刷行业常用单位. 等于1/72英寸</p>\n<p>1in = 2.54cm = 25.4mm = 72pt = 6pc</p>\n<h4 id=\"pc\"><a href=\"#pc\" class=\"headerlink\" title=\"pc\"></a>pc</h4><p>派卡(Pica), 相当于新四号铅字的尺寸</p>\n<h4 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h4><p>英寸(Inch)</p>\n<h4 id=\"mm\"><a href=\"#mm\" class=\"headerlink\" title=\"mm\"></a>mm</h4><p>毫米(Millimeter)</p>\n<h4 id=\"cm\"><a href=\"#cm\" class=\"headerlink\" title=\"cm\"></a>cm</h4><p>厘米(Centimeter)</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>px 是一个点, 不是自然界的长度单位, 可以画的很小也可以画的很大. 如果点很小, 那么画面就清晰, 我们称之为 “分辨率高”. 反之, 就是 “分辨率低”. 像素点的大小是会变的, 因此被称为相对长度单位.</p>\n<p>pt 就是 point, 大小相当于 1/72 英寸. 他是一个符合自然界标准的长度单位, 也称为”绝对长度”</p>\n<h2 id=\"new-操作符做了什么\"><a href=\"#new-操作符做了什么\" class=\"headerlink\" title=\"new 操作符做了什么\"></a>new 操作符做了什么</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">ctor, ...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建空对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 以新对象为上下文执行构造函数</span></span><br><span class=\"line\">    ctor.call(obj, ...rest)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 绑定原型</span></span><br><span class=\"line\">    obj.__proto__ = ctor.prototype</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简述cookie-session记住登录状态机制原理\"><a href=\"#简述cookie-session记住登录状态机制原理\" class=\"headerlink\" title=\"简述cookie/session记住登录状态机制原理\"></a>简述cookie/session记住登录状态机制原理</h2><p>session 是服务端存放会话的大型保险柜<br>cookie 是下发给客户端的打开保险柜指定抽屉的钥匙</p>\n<h2 id=\"网页中接收事件的顺序（事件流）有哪些？它们之间的区别是什么？\"><a href=\"#网页中接收事件的顺序（事件流）有哪些？它们之间的区别是什么？\" class=\"headerlink\" title=\"网页中接收事件的顺序（事件流）有哪些？它们之间的区别是什么？\"></a>网页中接收事件的顺序（事件流）有哪些？它们之间的区别是什么？</h2><ul>\n<li>捕获事件流</li>\n<li>冒泡事件流</li>\n<li>DOM事件流 模型</li>\n</ul>\n<p>捕获: document -&gt; 触发元素<br>冒泡: 触发元素 -&gt; document</p>\n<p>DOM 标准采用捕获 + 冒泡, 两种事件流都会触发 DOM 的所有对象. 从 document 对象开始, 也在 document 对象结束</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-29-19-36-21.png\" alt=\"2020-02-29-19-36-21\"></p>\n<p>DOM 标准规定事件流包括三个阶段:</p>\n<ul>\n<li>事件捕获阶段</li>\n<li>处于目标阶段</li>\n<li>事件冒泡阶段</li>\n</ul>\n<p>事件捕获阶段: 实际目标 <code>&lt;div&gt;</code> 在捕获阶段不会接收事件. 也就是在捕获阶段, 事件从 <code>document</code> 到 <code>&lt;html&gt;</code> 再到 <code>&lt;body&gt;</code> 就停止了<br>处于目标阶段: 事件在 <code>&lt;div&gt;</code> 上发生并处理. 但是事件处理会被看成是冒泡阶段的一部分<br>冒泡阶段: 事件又传播回文档</p>\n<h2 id=\"css属性position都有哪些值\"><a href=\"#css属性position都有哪些值\" class=\"headerlink\" title=\"css属性position都有哪些值\"></a>css属性position都有哪些值</h2><ul>\n<li>absolute 绝对定位</li>\n<li>relative 相对定位</li>\n<li>field 固定定位</li>\n<li>static 默认值, 没有定位</li>\n<li>inherit 继承父级定位方式</li>\n<li>initial 设置该属性为默认值</li>\n<li>sticky 黏性定位</li>\n</ul>\n<h2 id=\"简述你对HTTP控制访问（CORS）的理解\"><a href=\"#简述你对HTTP控制访问（CORS）的理解\" class=\"headerlink\" title=\"简述你对HTTP控制访问（CORS）的理解\"></a>简述你对HTTP控制访问（CORS）的理解</h2><p>我的理解在<a href=\"https://juejin.im/post/5c0a55e76fb9a049ef2665ba\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>参考文档:</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/starof/p/4066381.html\" target=\"_blank\" rel=\"noopener\">javaScript事件（一）事件流</a></li>\n</ul>\n","categories":["前端"],"tags":["interview"]},{"title":"常用工具","url":"/Tips/tips/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/","content":"<blockquote>\n<p>这里列举了我常用的效率工具, 免去了每次用的时候都需要百度一下的环节…</p>\n</blockquote>\n<h2 id=\"常用链接类-web-工具\"><a href=\"#常用链接类-web-工具\" class=\"headerlink\" title=\"常用链接类(web 工具)\"></a>常用链接类(web 工具)</h2><ul>\n<li><a href=\"http://autoprefixer.github.io\" target=\"_blank\" rel=\"noopener\">Autoprefixer CSS online</a></li>\n<li><a href=\"http://webchart.ihuhai.cn/index.html\" target=\"_blank\" rel=\"noopener\">时序图</a></li>\n<li>js 压缩混淆代码智能恢复工具<a href=\"http://jsnice.org/\" target=\"_blank\" rel=\"noopener\">jsnice</a></li>\n<li>代码美化, 生成图片 <a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">carbon</a></li>\n<li>代码生成图片 <a href=\"https://codeimg.io/\" target=\"_blank\" rel=\"noopener\">codeimg</a></li>\n<li>ip 查询工具 <a href=\"https://www.ipip.net/ip.html\" target=\"_blank\" rel=\"noopener\">ip</a></li>\n<li>通过 ip 反查域名工具 <a href=\"https://tools.ipip.net/ipdomain.php\" target=\"_blank\" rel=\"noopener\">ipip</a></li>\n<li>笔记工具<a href=\"https://mubu.com/\" target=\"_blank\" rel=\"noopener\">幕布</a>可生成思维导图</li>\n<li><a href=\"https://www.yunpanjingling.com/\" target=\"_blank\" rel=\"noopener\">云盘精灵</a></li>\n</ul>\n<h2 id=\"常用-npm-包\"><a href=\"#常用-npm-包\" class=\"headerlink\" title=\"常用 npm 包\"></a>常用 npm 包</h2><ul>\n<li>npm 代码包离线版 <a href=\"https://unpkg.com/\" target=\"_blank\" rel=\"noopener\">unpkg</a></li>\n<li>自动生成 changelog <a href=\"https://www.npmjs.com/package/conventional-changelog\" target=\"_blank\" rel=\"noopener\">conventional-changelog</a></li>\n<li>fs 增强工具 <a href=\"https://www.npmjs.com/package/fs-extra\" target=\"_blank\" rel=\"noopener\">fs-extra</a></li>\n<li>压缩工具 <a href=\"https://www.npmjs.com/package/compression\" target=\"_blank\" rel=\"noopener\">compression</a></li>\n</ul>\n<h2 id=\"那些带我飞的博客\"><a href=\"#那些带我飞的博客\" class=\"headerlink\" title=\"那些带我飞的博客\"></a>那些带我飞的博客</h2><ul>\n<li><a href=\"https://juejin.im/post/59097cd7a22b9d0065fb61d2\" target=\"_blank\" rel=\"noopener\">手摸手，带你用vue撸后台</a></li>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\" target=\"_blank\" rel=\"noopener\">冴羽的博客</a></li>\n<li><a href=\"https://github.com/justjavac/the-front-end-knowledge-you-may-not-know\" target=\"_blank\" rel=\"noopener\">你可能不知道的前端知识点</a></li>\n</ul>\n","categories":["Tips"],"tags":["工具"]},{"title":"常见的小坑","url":"/Tips/tips/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B0%8F%E5%9D%91/","content":"<h2 id=\"Safari-中-flex-包含图片高度暴走\"><a href=\"#Safari-中-flex-包含图片高度暴走\" class=\"headerlink\" title=\"Safari 中 flex 包含图片高度暴走\"></a>Safari 中 flex 包含图片高度暴走</h2><p>详情:</p>\n<p>Safari 中 flex 容器包含一个图片时图片加载完成后高度会暴走</p>\n<p>解决方案:</p>\n<ul>\n<li>不这样用</li>\n<li>限制宽度的图片利用竖向 flex</li>\n<li>限制高度的图片利用横向 flex</li>\n</ul>\n","categories":["Tips"],"tags":["常见的坑"]},{"title":"模块打包","url":"/JavaScript/webpack%20%E5%AE%9E%E6%88%98/%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85/","content":"<blockquote>\n<p><a href=\"https://item.jd.com/12623590.html\" target=\"_blank\" rel=\"noopener\">webpack 实战</a> 第二章学习笔记</p>\n</blockquote>\n<h2 id=\"模块的概念\"><a href=\"#模块的概念\" class=\"headerlink\" title=\"模块的概念\"></a>模块的概念</h2><p>模块相之于程序, 就如同细胞之于生物体, 是具有特定功能的组成单元. 不同的模块负责不同的工作. 他们以某种方式联系在一起, 共同保证了程序的正常工作.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>CommonJS 是由 JavaScript 社区于 2009 年提出的包含模块 文件 控制台在内的一系列标准.</p>\n<p>CommonJS 最初只为了服务端而设计, 直到有了 browserify 可以将 CommonJS 模块打包为浏览器可以运行的单个文件. 意味着客户端也可以遵循 CommonJS 标准来编写模块代码了</p>\n<h3 id=\"对比直接插入-script-标签\"><a href=\"#对比直接插入-script-标签\" class=\"headerlink\" title=\"对比直接插入 script 标签\"></a>对比直接插入 script 标签</h3><p>CommonJS 中规定每个文件就是一个模块, 他与直接使用 script 标签将 js 文件引入的区别主要是, 直接引入的方式 js 文件的顶级作用域是全局作用域 在进行变量及函数声明时会污染全局环境, 后者则会形成一个属于模块自身的作用域, 模块内的函数和变量只有模块内部可以访问, 对外是不可见的</p>\n<p>例如:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'calculator.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'index.js'</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./calculator.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name) <span class=\"comment\">// index.js</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码会输出 <code>index.js</code> 说明了 <code>calculator.js</code> 中的变量声明不会影响 <code>index.js</code>, 每个模块都是有自己的作用域的.</p>\n<h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><p>由于模块外部不能访问到模块内的内容所以模块想要像外界暴露自身的唯一方式就是导出, CommonJS 中通过 module.exports 向外暴露内容.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span>,</span><br><span class=\"line\">    add(a, b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS 内部使用 module 对象用于存放当前模块的信息, 可以理解为模块最开始定义了一下变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>module.exports</code> 定义了模块向外部导出的内容, 为了书写的方便. CommonJS 提供了以下简写方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">exports.name = <span class=\"string\">'calculator.js'</span></span><br><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码和 <code>module.exports</code> 导出方式在实现效果上没有任何的区别, 其中的机制是将 <code>exports</code> 指向了 <code>module.exports</code>, 而 <code>module.exports</code> 初始化时指向了一个空对象. 可以理解为 CommonJS 默认在每个模块的首部添加了以下代码.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = &#123;</span><br><span class=\"line\">    exports: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> exports = <span class=\"built_in\">module</span>.exports</span><br></pre></td></tr></table></figure>\n\n<p>所以 <code>exports.add</code> 相当于给 <code>module.exports</code> 添加了一个属性</p>\n<p>PS: 使用 <code>exports</code> 时需要注意, 不能直接给 <code>exports</code> 否则会使其失效</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时, 只是修改了 <code>exports</code> 的值, 但是 <code>module.exports</code> 却仍然指向原来的对象, 因此 <code>name</code> 属性不会被导出</p>\n<p>还有一个常见的错位用法是将 <code>exports</code> 和 <code>module.exports</code> 混用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">exports.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">modules.exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中, 首先用 <code>exports</code> 导出了 add 属性, 然后将 <code>module.exports</code> 重新赋值为另外一个对象. 这会导致原本拥有的 add 属性丢失掉了, 最终只有 name 成功导出.</p>\n<p>还要注意, 导出语句不代表模块的末尾, 在 <code>module.exports</code> 或 <code>exports</code> 后边的代码也是会执行的, 比如下面的代码会成功打印出 end</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入-require\"><a href=\"#导入-require\" class=\"headerlink\" title=\"导入 require\"></a>导入 require</h3><p>在 CommonJS 中需要使用 require 导入模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> calculator = <span class=\"built_in\">require</span>(<span class=\"string\">'./calculator.js'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = calculator.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上述示例中, 在 <code>index.js</code> 中到入了 calculator 还使用了它的 add 方法</p>\n<h4 id=\"导入一个模块的两种情况\"><a href=\"#导入一个模块的两种情况\" class=\"headerlink\" title=\"导入一个模块的两种情况\"></a>导入一个模块的两种情况</h4><ul>\n<li>require 的模块是第一次被加载, 这时会首先执行该模块, 然后导出内容</li>\n<li>require 的模块曾被加载过, 这时该模块的代码不会再次执行, 而是直接导出上次加载时执行的结果</li>\n</ul>\n<h4 id=\"不需要获取导出内容的导入\"><a href=\"#不需要获取导出内容的导入\" class=\"headerlink\" title=\"不需要获取导出内容的导入\"></a>不需要获取导出内容的导入</h4><p>如果需要加载一个模块但是不需要获取其导出的内容, 只是想要通过执行它而产生某种作用(比如 polyfill) 此时只需要执行 require 语句, 无需赋值操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动态加载路径\"><a href=\"#动态加载路径\" class=\"headerlink\" title=\"动态加载路径\"></a>动态加载路径</h4><p>require 还支持接收表达式模块路径. 因此, 我们可以动态地指定模块加载的路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleNames = [<span class=\"string\">'foo.js'</span>, <span class=\"string\">'bar.js'</span>]</span><br><span class=\"line\">moduleNames.forEach(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">`./<span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-Module\"><a href=\"#ES6-Module\" class=\"headerlink\" title=\"ES6 Module\"></a>ES6 Module</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>2015 年 6 月, 由 TC39 标准 委员会正式发布了 ES6, JavaScript 才拥有了模块化的能力</p>\n<h3 id=\"语法示例\"><a href=\"#语法示例\" class=\"headerlink\" title=\"语法示例\"></a>语法示例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\">exports <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span>,</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> calculator <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = calculator.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"和-CommonJS-的异同\"><a href=\"#和-CommonJS-的异同\" class=\"headerlink\" title=\"和 CommonJS 的异同\"></a>和 CommonJS 的异同</h3><p>相同点:</p>\n<ul>\n<li>ES Module 也是把每个文件都当做一个模块, 每个模块拥有自身的作用域</li>\n</ul>\n<p>不同点:</p>\n<ul>\n<li>和 CommonJS 不同的地方是导入和导出的语句</li>\n<li><code>import</code> 和 <code>export</code> 也在 ES6 确认为保留关键字(CommonJS 中的 module 不属于保留关键字)</li>\n<li>ES6 Module 会自动采用严格模式, 这在 ES5(CommonJS) 中是一个可选项.</li>\n</ul>\n<h3 id=\"导出-1\"><a href=\"#导出-1\" class=\"headerlink\" title=\"导出\"></a>导出</h3><ul>\n<li>命名导出</li>\n<li>默认导出</li>\n</ul>\n<h4 id=\"命名导出\"><a href=\"#命名导出\" class=\"headerlink\" title=\"命名导出\"></a>命名导出</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写法 1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'calculator'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'calculator'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name, add&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用命名导出时还可以使用 as 进行重命名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'calculator'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;name, add <span class=\"keyword\">as</span> getSum&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h4><p>对于默认输出可以理解为对外输出了一个名为 <code>default</code> 的变量, 因此不需要像命名导出一样进行变量声明, 直接导出即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator'</span>,</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>ES6 Module 中使用 import 导入模块, 导入的内容定义的变量是只读的, 不能进行修改.</p>\n<ul>\n<li>导入带有命名导出的模块</li>\n<li>导入默认导出的模块</li>\n<li>导入两种导出模式混用的模块</li>\n</ul>\n<h4 id=\"导入带有命名导出的模块\"><a href=\"#导入带有命名导出的模块\" class=\"headerlink\" title=\"导入带有命名导出的模块\"></a>导入带有命名导出的模块</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\">exports <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator.js'</span>,</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name, add&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>与命名导出类似, 可以通过 as 关键字对导入的变量重新命名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;name, add <span class=\"keyword\">as</span> getSum&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = getSum(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>在导入多个变量时还可以采用整体导入的方式, 使用整体导入的方式把所有导入的值作为属性值添加给导入变量, 能够减少模块导入对当前模块的命名空间的影响.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> calculator <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sum = calculator.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入默认导出的模块\"><a href=\"#导入默认导出的模块\" class=\"headerlink\" title=\"导入默认导出的模块\"></a>导入默认导出的模块</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'calculator'</span>,</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> calculator <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\">calculator(<span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>对于默认导出的模块, import 后边直接跟变量名, 并且这个变量名可以自由指定. 用于指代 calculator.js 导出的值, 原理如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"keyword\">default</span> <span class=\"keyword\">as</span> calculator&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入两种导出模式混用的模块\"><a href=\"#导入两种导出模式混用的模块\" class=\"headerlink\" title=\"导入两种导出模式混用的模块\"></a>导入两种导出模式混用的模块</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br></pre></td></tr></table></figure>\n\n<p>以上 demo 中 React 是 react 模块的默认导出, Component 则是命名导出的一个变量</p>\n<p>PS: 这里的 React 一定要写在 大括号的左边, 否则会报语法错误…</p>\n<h3 id=\"复合导出和导入\"><a href=\"#复合导出和导入\" class=\"headerlink\" title=\"复合导出和导入\"></a>复合导出和导入</h3><p>在实际项目中, 经常需要把某一个模块导入以后立即导出(组件入口), 此时可以使用复合模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;name, add&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br></pre></td></tr></table></figure>\n\n<p>复合写法, 目前只支持被导入模块通过命名导出的方式导出的变量, 默认导出则没有对应的复合语法, 需要分为两步.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> calculator <span class=\"keyword\">from</span> <span class=\"string\">'./calculator.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> calculator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CommonJS-和-ES6-Module-的区别\"><a href=\"#CommonJS-和-ES6-Module-的区别\" class=\"headerlink\" title=\"CommonJS 和 ES6 Module 的区别\"></a>CommonJS 和 ES6 Module 的区别</h2><ul>\n<li>动态与静态</li>\n<li>值拷贝和动态映射</li>\n<li>循环依赖</li>\n</ul>\n<h3 id=\"动态与静态\"><a href=\"#动态与静态\" class=\"headerlink\" title=\"动态与静态\"></a>动态与静态</h3><p>CommonJS 对模块依赖的解决是<strong>动态</strong>的, 而 ES6 Module 是<strong>静态</strong>的. 其中, 动态表示模块依赖关系的建立发生在代码的<strong>运行阶段</strong>, 而静态则表示模块依赖关系的建立发生在代码的<strong>编译阶段</strong>.</p>\n<p>首先看一个 CommonJS 的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>).name</span><br></pre></td></tr></table></figure>\n\n<p>模块 a 加载模块 b 时, 会先执行 b 中的代码, 并将其 <code>module.exports</code> 作为 require 的返回值. 并且 require 模块的路径可以动态指定, 支持传入一个表达式. 甚至可以通过 if 语句判断是否加载某个模块. 故, 代码执行前不能明确代码之间的依赖关系, 模块的导入导出发生在代码的运行阶段.</p>\n<p>再看一个 ES6 Module 的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;name&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./b.js'</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 Module 的导入和导出语句都是声明式的, 不能够支持路径是一个表达式. 并且导入和导出语句必须在模块的顶层作用域(不能在 if 语句中). 故, ES6 Module 是一种静态的模块结构, 在 ES6 代码的编译阶段就能分析出模块的依赖关系.</p>\n<p>相对于 CommonJS 动态导入类型优势</p>\n<ul>\n<li>死代码检测和排除</li>\n<li>可实现模块变量类型检查</li>\n<li>编译器优化, 在 CommonJS 等动态模块化系统中, 无论采用哪种方式, 本质上导入的都是一个对象. 而 es6 支持直接导入变量, 减少了引用的层级. 程序效率更高</li>\n</ul>\n<h3 id=\"值拷贝和动态映射\"><a href=\"#值拷贝和动态映射\" class=\"headerlink\" title=\"值拷贝和动态映射\"></a>值拷贝和动态映射</h3><p>导入一个模块时, CommonJS 方案获取的是一份导出<strong>值的拷贝</strong>, 而在 ES6 Module 中获得的则是<strong>值的动态映射</strong>且这个映射是只读的.</p>\n<p>首先看一个 CommonJS 的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    count,</span><br><span class=\"line\">    add(a, b) &#123;</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo.js'</span>).count</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo.js'</span>).add</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 0 这里的 count 是对 foo.js 中的 count 值的拷贝</span></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 0 foo.js 中的 count 的变化不会改变导入的 count 的值</span></span><br><span class=\"line\">count += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 1 导入的 count 变量, 也就是拷贝的值可以更改</span></span><br></pre></td></tr></table></figure>\n\n<p><code>bar.js</code> 中的 count 是对 <code>foo.js</code> 中的 count 值的一份值拷贝, 因此在调用 add 函数时, 虽然改变了 <code>foo.js</code> 中的 count 的值但是并没有对 bar 中导入是创建的副本造成影响. 同时, 在 CommonJS 中允许我们对导入的值进行修改. 可以修改 <code>bar.js</code> 中导入的 count 的值, 当然由于是值的拷贝, 这些操作也不会影响到 <code>bar.js</code> 本身.</p>\n<p>其次, 看一个 ES6 Module 的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;count, add&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;count, add&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 0 这里的 count 是对 foo.js 中的 count 值的映射</span></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count) <span class=\"comment\">// 1 实时反映 foo.js 中的 count 值的变化</span></span><br><span class=\"line\">count += <span class=\"number\">1</span> <span class=\"comment\">// 不可更改, 抛出 SyntaxError</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 Module 中导入的变量, 其实就是对原有值的<strong>动态映射</strong> <code>bar.js</code> 中导入的 count 就是 <code>foo.js</code> 中的 count 变量值的<strong>实时反映</strong>, 通过使用 add 方法修改了 <code>foo.js</code> 中的 count 变量, <code>bar.js</code> 中导入的 count 变量值也随之变化.</p>\n<h3 id=\"循环依赖代码示例\"><a href=\"#循环依赖代码示例\" class=\"headerlink\" title=\"循环依赖代码示例\"></a>循环依赖<a href=\"https://github.com/luoquanquan/learn-fe/tree/master/webpack-learn/webpack-in-action/circular-reference\" target=\"_blank\" rel=\"noopener\">代码示例</a></h3><p>循环依赖指的是 a 依赖 b, 同时 b 又依赖 a, 比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;bar&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./bar.js'</span></span><br><span class=\"line\">bar()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;foo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n\n<p>工程项目中应该避免循环依赖的产生, 但是实际项目复杂度上升的时候容易出现隐藏的循环依赖关系…</p>\n<p>首先看一个 CommonJS 的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"built_in\">require</span>(<span class=\"string\">'./bar.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'value of bar: '</span>, bar)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'this is foo.js'</span></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'./foo.js'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'value of foo: '</span>, foo)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'this is bar.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./foo.js'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上例中, <code>index.js</code> 是程序执行的入口. 它加载了 <code>foo.js</code> 然而 <code>foo.js</code> 和 <code>bar.js</code> 存在循环依赖关系, 理想情况下, 两个模块都能正常执行控制台输出以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">value of foo: this is foo.js</span><br><span class=\"line\">value of bar: this is bar.js</span><br></pre></td></tr></table></figure>\n\n<p>然而实际是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">value of foo:  &#123;&#125;</span><br><span class=\"line\">value of bar:  this is bar.js</span><br></pre></td></tr></table></figure>\n\n<p>上述代码的执行过程为:</p>\n<ol>\n<li><code>index.js</code> 导入了 <code>foo.js</code>, 此时开始执行 <code>foo.js</code> 中的代码</li>\n<li><code>foo.js</code> 第一行导入了 <code>bar.js</code>, 这时 <code>foo.js</code> 不会继续向下执行, 而是进入 <code>bar.js</code> 内部</li>\n<li>在 <code>bar.js</code> 中又对 <code>foo.js</code> 进行了导入, 产生循环依赖.</li>\n<li>然而此时由于 <code>foo.js</code> 已经被导入过一次, 执行权不会再次给到 <code>foo.js</code> 而是直接取其导出值, 也就是 <code>module.exports</code> 但是 <code>foo.js</code> 还没有执行完毕导出值此时为默认的空对象, 所以 <code>bar.js</code> 中的打印语句打印的结果是 <code>value of foo:  {}</code></li>\n<li><code>bar.js</code> 执行完毕, 执行权交回 <code>foo.js</code>, 在 <code>foo.js</code> 中继续向下执行, 在控制台中打印出 <code>value of bar:  this is bar.js</code> 整个流程结束</li>\n</ol>\n<p>通过以上流程可知, CommonJS 中遇到循环依赖, 虽然模块都会执行, 但是并不能获取到我们想要的结果. 通过 webpack 生成代码的这一段可以理解以上第四步的内容, 当然也可以在 nodejs 模块的 require 函数前打点, 进入函数内部研究一把. 道理是一样的,</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> installedModules[moduleId].exports;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\">\t\ti: moduleId,</span><br><span class=\"line\">\t\tl: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\texports: &#123;&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\">\tmodules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Flag the module as loaded</span></span><br><span class=\"line\">\t<span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其次, 看一个 ES6 Module  循环依赖的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bar <span class=\"keyword\">from</span> <span class=\"string\">'./bar'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'value of bar: '</span>, bar)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'this is foo.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'value of foo: '</span>, foo)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'this is bar.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./foo.js'</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 node 不能支持 <code>ES6 Module</code>, 所以需要使用 parcel 做一下打包处理, 详细代码在<a href=\"https://github.com/luoquanquan/learn-fe/tree/master/webpack-learn/webpack-in-action/circular-reference/es6-module\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>输出的结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">value of foo:  undefined</span><br><span class=\"line\">foo.js:2 value of bar:  this is bar.js</span><br></pre></td></tr></table></figure>\n\n<p><code>ES6 Module</code> 中也不能得到预想的值, 但是和 <code>CommonJS</code> 有区别, 在于 <code>CommonJS</code> 循环依赖得到的是一个空对象而 <code>ES6 Module</code> 得到的是 undefined.</p>\n<p>利用 <code>ES6 Module</code> 获取到的值是模块的动态映射的特性使其支持循环依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bar <span class=\"keyword\">from</span> <span class=\"string\">'./bar'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">invoker</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(invoker, <span class=\"string\">' invokes foo.js'</span>)</span><br><span class=\"line\">    bar(<span class=\"string\">'foo.js'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> invoked = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">invoker</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!invoked) &#123;</span><br><span class=\"line\">        invoked = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(invoker, <span class=\"string\">' invokes bar.js'</span>)</span><br><span class=\"line\">        foo(<span class=\"string\">'bar.js'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> bar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span></span><br><span class=\"line\">foo(<span class=\"string\">'index.js'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码运行的结果为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">index.js  invokes foo.js</span><br><span class=\"line\">bar.js:7 foo.js  invokes bar.js</span><br><span class=\"line\">foo.js:3 bar.js  invokes foo.js</span><br></pre></td></tr></table></figure>\n\n<p>综上, <code>foo.js</code> 和 <code>bar.js</code> 两个模块均获取了正确的导出值, 代码执行的过程为.</p>\n<ol>\n<li><code>index.js</code> 作为入口导入 <code>foo.js</code>, 开始执行 <code>foo.js</code> 中的代码</li>\n<li><code>foo.js</code> 中导入了 <code>bar.js</code> 执行权交给 <code>bar.js</code></li>\n<li>在 <code>bar.js</code> 中一直执行到其结束, 完成 bar 函数的定义, 此时 <code>foo.js</code> 还没有执行完, 所以 foo 还是 undefined</li>\n<li>执行权回到 <code>foo.js</code> 继续执行直到结束, 完成 foo 函数的定义, 由于 <code>ES6 Module</code> 的动态特性, 此时 <code>bar.js</code> 中的 foo 变量也已经有值. 这是两中模块加载方式的本质区别</li>\n<li>执行权回到 <code>index.js</code> 并执行 foo 函数, 此时依次执行 <code>foo -&gt; bar -&gt; foo</code>, 并在控制台打印出预想的值</li>\n</ol>\n","categories":["JavaScript"],"tags":["webpack"]},{"title":"URL 跳转漏洞","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/url%20%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>URL 跳转漏洞, 就是利用没有验证功能的 Url 跳转能力, 将应用引导到不安全<br>的第三方区域.</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-19-56-30.png\" alt=\"2020-02-15-19-56-30\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><ul>\n<li>header 跳转</li>\n<li>JavaScript 跳转</li>\n<li>Meta 标签跳转</li>\n</ul>\n<h2 id=\"防范\"><a href=\"#防范\" class=\"headerlink\" title=\"防范\"></a>防范</h2><p>跳转前要检验待跳转的 url 是否是合法的, 通过添加白名单控制</p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"点击劫持","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81/","content":"<h2 id=\"就这一张图-内容就不编了\"><a href=\"#就这一张图-内容就不编了\" class=\"headerlink\" title=\"就这一张图, 内容就不编了\"></a>就这一张图, 内容就不编了</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-19-39-53.png\" alt=\"2020-02-15-19-39-53\"></p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"CSRF","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/CSRF/","content":"<h2 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cross Site request forgery</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文名称\"><a href=\"#中文名称\" class=\"headerlink\" title=\"中文名称\"></a>中文名称</h2><p>跨站请求伪造</p>\n<h2 id=\"常见危害\"><a href=\"#常见危害\" class=\"headerlink\" title=\"常见危害\"></a>常见危害</h2><p>执行恶意操作(被转账, 被发垃圾评论…), 制造蠕虫…</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>利用用户已登录的身份, 在用户毫不知情的情况下, 以用户的名义执行非法操作</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-13-51-26.png\" alt=\"2020-02-15-13-51-26\"></p>\n<p>原理分析<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-13-56-37.png\" alt=\"2020-02-15-13-56-37\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-13-58-19.png\" alt=\"2020-02-15-13-58-19\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-13-59-15.png\" alt=\"2020-02-15-13-59-15\"></p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"XSS","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/xss/","content":"<h2 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cross Site Script</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文名称\"><a href=\"#中文名称\" class=\"headerlink\" title=\"中文名称\"></a>中文名称</h2><p>跨站脚本</p>\n<h2 id=\"常见危害\"><a href=\"#常见危害\" class=\"headerlink\" title=\"常见危害\"></a>常见危害</h2><p>盗取用户信息, 钓鱼, 制造蠕虫…</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>黑客通过 “html 注入” 篡改网页, <strong>插入恶意脚本</strong>. 当用户浏览网页时, 实现控制用户浏览器行为的一种攻击方式.</p>\n<a id=\"more\"></a>\n\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-22-12.png\" alt=\"2020-02-15-00-22-12\"></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h3><p>访问网站, 触发 XSS</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-26-48.png\" alt=\"2020-02-15-00-26-48\"></p>\n<p>黑客入侵流程<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-27-32.png\" alt=\"2020-02-15-00-27-32\"></p>\n<h3 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h3><p>访问携带 XSS 脚本的链接触发 XSS, XSS 代码存在于 search 串中. 后端直接返回了<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-30-09.png\" alt=\"2020-02-15-00-30-09\"></p>\n<p>代码实现<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-29-26.png\" alt=\"2020-02-15-00-29-26\"></p>\n<h3 id=\"DOM-型\"><a href=\"#DOM-型\" class=\"headerlink\" title=\"DOM 型\"></a>DOM 型</h3><p>访问携带 XSS 脚本的链接触发 XSS, XSS 代码存在于 hash 中<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-33-25.png\" alt=\"2020-02-15-00-33-25\"></p>\n<p>代码实现<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-32-16.png\" alt=\"2020-02-15-00-32-16\"></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-33-04.png\" alt=\"2020-02-15-00-33-04\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-41-29.png\" alt=\"2020-02-15-00-41-29\"></p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"基础知识","url":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%AD%E7%BB%83%E8%AF%BE-%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"<h2 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h2><p>统一资源定位符</p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-14-23-03-28.png\" alt=\"2020-02-14-23-03-28\"></p>\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>超文本传输协议 <code>Hyper Text Transfer Protocol</code></p>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-14-23-09-51.png\" alt=\"2020-02-14-23-09-51\"></p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ul>\n<li>web 通信使用的协议</li>\n<li>web 的基础</li>\n<li>最广泛</li>\n<li>…</li>\n</ul>\n<h3 id=\"报文\"><a href=\"#报文\" class=\"headerlink\" title=\"报文\"></a>报文</h3><p>GET:<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-14-23-11-25.png\" alt=\"2020-02-14-23-11-25\"></p>\n<p>POST:<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-14-23-13-52.png\" alt=\"2020-02-14-23-13-52\"></p>\n<h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><table>\n<thead>\n<tr>\n<th>请求类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>POST</td>\n<td>创建一个资源</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除指定资源</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>更新资源</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>获取资源</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>与 GET 请求类似, 区别在于 HEAD 请求只需要服务器返回 HTTP 头信息, 没有页面内容</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>咨询服务器当前情况下的可访问性</td>\n</tr>\n</tbody></table>\n<h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><p>告知服务器当前请求的来源(浏览器添加 js 不可修改)</p>\n<p>Referer 的用途有</p>\n<ul>\n<li>防止盗链</li>\n<li>防止 CSRF</li>\n</ul>\n<h2 id=\"钓鱼网站\"><a href=\"#钓鱼网站\" class=\"headerlink\" title=\"钓鱼网站\"></a>钓鱼网站</h2><ul>\n<li>诱惑性标题</li>\n<li>仿冒真实网站</li>\n<li>骗取用户账号</li>\n<li>骗取用户资料</li>\n</ul>\n<h2 id=\"网页篡改\"><a href=\"#网页篡改\" class=\"headerlink\" title=\"网页篡改\"></a>网页篡改</h2><p>修改网页, 这个比较常见</p>\n<h2 id=\"搜索引擎技巧\"><a href=\"#搜索引擎技巧\" class=\"headerlink\" title=\"搜索引擎技巧\"></a>搜索引擎技巧</h2><ul>\n<li>Intitle:keyword 标题中含有关键字的网页</li>\n<li>Intext:keyword 正文中含有关键词的网页</li>\n<li>Site:domain 某个域名和子域名下的所有网页</li>\n</ul>\n<h2 id=\"暗链\"><a href=\"#暗链\" class=\"headerlink\" title=\"暗链\"></a>暗链</h2><p>隐藏在网页中的链接, 不能被正常人点击. 主要目的是提升链接性, 获得在搜索引擎爬虫的曝光度</p>\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><ul>\n<li>后门, 可执行环境</li>\n<li>功能强大</li>\n<li>入侵检测系统难以发现</li>\n</ul>\n<h2 id=\"常见的攻击方式分类\"><a href=\"#常见的攻击方式分类\" class=\"headerlink\" title=\"常见的攻击方式分类\"></a>常见的攻击方式分类</h2><p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-15-00-12-50.png\" alt=\"2020-02-15-00-12-50\"></p>\n","categories":["网络安全"],"tags":["网络安全"]},{"title":"归并排序","url":"/Blog/dataStructures-algorithms/NOTE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>归并排序是一种分治算法, 其思想就是将原始数组切分成较小的数组, 直到每个数组只有一个元素. 接着将小数组归并成较大的数组, 直到最后只有一个排序完成的大数组…</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将小数组合并成大数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"function\">(<span class=\"params\">left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> il = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ir = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[il] &lt; right[ir]) &#123;</span><br><span class=\"line\">            ret.push(left[il++])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ret.push(right[ir++])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (il &lt; left.length) &#123;</span><br><span class=\"line\">        ret.push(left[il++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ir &lt; right.length) &#123;</span><br><span class=\"line\">        ret.push(right[ir++])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将大数组拆分成小数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mergeSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = array.slice(<span class=\"number\">0</span>, mid)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = array.slice(mid, len)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(left, right)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拆分过程</span></span><br><span class=\"line\">[ 9, 10 ] [ 0, 2, 1 ]</span><br><span class=\"line\">[ 9 ] [ 10 ]</span><br><span class=\"line\">[ 0 ] [ 2, 1 ]</span><br><span class=\"line\">[ 2 ] [ 1 ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并的过程</span></span><br><span class=\"line\">[ 9, 10 ]</span><br><span class=\"line\">[ 1, 2 ]</span><br><span class=\"line\">[ 0, 1, 2 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>归并排序的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/13fa54944846254d6defb2c5cc1d0bc95a768320\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"快速排序","url":"/Blog/dataStructures-algorithms/NOTE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>快速排序是一种分而治之的算法, 通过递归的方式将数据依次分解为包含较小元素和较大元素的不同子序列.不断重复直到所有的数据都是有序的. 即选择数组中的第一个元素作为记准元素, 数据排序围绕记准元素进行, 小于基准值的元素移动到数组的底部, 大于记准值的移动到数组的顶部.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"数据结构与算法-JavaScript-描述\"><a href=\"#数据结构与算法-JavaScript-描述\" class=\"headerlink\" title=\"数据结构与算法 JavaScript 描述\"></a>数据结构与算法 JavaScript 描述</h3><p>首先, 判断数组的长度是否为 0, 为 0 的话直接返回不做处理. 否则, 选择第一个元素基准值, 并创建两个数组. 一个用于存放小于基准值的元素, 一个用与存放大于基准值的元素.<br>其次, 从第二个元素开始扫描所有元素, 根据他们和基准值的关系把他们放到合适的数组中<br>最后, 重复以上操作, 递归结束时, 把较小数组和较大数组拼接起来并返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> quickSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = array[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>; idx &lt; len; idx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> curItem = array[idx]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curItem &lt; pivot) &#123;</span><br><span class=\"line\">            left.push(curItem)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right.push(curItem)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat(pivot, quickSort(right))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"学习JavaScript数据结构与算法\"><a href=\"#学习JavaScript数据结构与算法\" class=\"headerlink\" title=\"学习JavaScript数据结构与算法\"></a>学习JavaScript数据结构与算法</h3><p>首先, 选择数组的中间元素作为基准值<br>其次, 创建两个下标变量, 左边的下标指像数组的第一个元素, 右边的指向数组的最后一个元素. 移动左下标直到找到第一个比基准值大的元素, 移动右下标直到找到一个比基准值小的元素, 然后交换两者的位置. 重复这个过程, 直到左下标超过了右下标. 这个过程将使得比基准元素小的元素都到基准元素前, 比他大的元素都到基准元素后. 也就是划分操作, 体现分治思想<br>最后, 最基准元素左边的部分元素组成的数组和右边的元素组成的数组递归重复以上操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 划分操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> partition = <span class=\"function\">(<span class=\"params\">array, left, right</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pivot = array[<span class=\"built_in\">Math</span>.floor((left + right) / <span class=\"number\">2</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = left, j = right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (array[i] &lt; pivot) &#123;</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (array[j] &gt; pivot) &#123;</span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt;= j) &#123;</span><br><span class=\"line\">            swap(array, i, j)</span><br><span class=\"line\">            i++</span><br><span class=\"line\">            j--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归调用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> qSort = <span class=\"function\">(<span class=\"params\">array, left = <span class=\"number\">0</span>, right = array.length - <span class=\"number\">1</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (array.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = partition(array, left, right)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; index - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            qSort(array, left, index - <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; right) &#123;</span><br><span class=\"line\">            qSort(array, index, right)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>执行的结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">quickSort: 0.295ms</span><br><span class=\"line\">当前时间 1581610074184: debug 的数据是 quickSortedArray:  [ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">qSort: 0.631ms</span><br><span class=\"line\">当前时间 1581610074188: debug 的数据是 qSortArray:  [ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>目前代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/c8ab0c249882108f459b1facfdd9996f897325b1\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"对比两种快排的效率\"><a href=\"#对比两种快排的效率\" class=\"headerlink\" title=\"对比两种快排的效率\"></a>对比两种快排的效率</h2><p>创建大数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;swap, createRandomArr&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'./utils'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> randomArr = createRandomArr(<span class=\"number\">1e6</span>, <span class=\"number\">0</span>, <span class=\"number\">1e8</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">quickSort: 1184.332ms</span><br><span class=\"line\">qSort: 158.277ms</span><br></pre></td></tr></table></figure>\n\n<p>通过以上的结论不难看出, 处理较大数据时 &lt;&lt;学习JavaScript数据结构与算法&gt;&gt; 中描述的方案优势明显</p>\n<p>目前的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/122e9683b5228456666084cfeebccd8ba1875a9c\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://book.douban.com/subject/25945449/\" target=\"_blank\" rel=\"noopener\">数据结构与算法JavaScript描述</a></li>\n<li><a href=\"https://book.douban.com/subject/26639401/\" target=\"_blank\" rel=\"noopener\">学习JavaScript数据结构与算法</a></li>\n</ul>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"插入排序","url":"/Blog/dataStructures-algorithms/NOTE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>插入排序每次排序一个数组项, 假定第一项已经排序好了. 依次向后扫描所有元素, 比如到第二项时, 和已经排序好的部分比较, 看看放到哪里合适, 由于此时只有第一项已经排序好了, 就是看看放在第一项的左边还是右边. 第三项和前两项比较, 找到它合适的位置, 以此类推…</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> insertionSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">    <span class=\"keyword\">let</span> outerIndex, innerIndex, temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (outerIndex = <span class=\"number\">1</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        temp = array[outerIndex]  <span class=\"comment\">// 待排元素</span></span><br><span class=\"line\">        innerIndex = outerIndex - <span class=\"number\">1</span> <span class=\"comment\">// 已经排好的队伍</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前排序好的队伍 <span class=\"subst\">$&#123;array.slice(<span class=\"number\">0</span>, outerIndex)&#125;</span>`</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 拿当前的待排元素到已经排好的队伍里边找他合适的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (innerIndex &gt;= <span class=\"number\">0</span> &amp;&amp; array[innerIndex] &gt; temp) &#123;</span><br><span class=\"line\">            array[innerIndex + <span class=\"number\">1</span>] = array[innerIndex]</span><br><span class=\"line\">            --innerIndex</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[innerIndex + <span class=\"number\">1</span>] = temp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">当前排序好的队伍 9</span><br><span class=\"line\">当前排序好的队伍 9,10</span><br><span class=\"line\">当前排序好的队伍 0,9,10</span><br><span class=\"line\">当前排序好的队伍 0,2,9,10</span><br><span class=\"line\">insertionSort: 3.984ms</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>插入排序的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/3ed8aaded65a371d014a5cbe5b162e0d0cf480ba\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"选择排序","url":"/Blog/dataStructures-algorithms/NOTE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>选择排序是一种原址比较的排序的算法. 从数组的开头开始和其他元素比较. 找到最小的数放到第一位, 接着找到第二小的数放到第二位. 以此类推, 直到移动到数组的倒数第二个位置时说明当前数组已经对比完毕. 完成排序.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"程序流程\"><a href=\"#程序流程\" class=\"headerlink\" title=\"程序流程\"></a>程序流程</h2><p>选择排序用到了嵌套循环, 外循环从数组的第一个元素开始移动到数组的倒数第二个元素. 内循环从当前外循环指定元素的下一个元素开始移动到数组的最后一个元素, 查找比当前外层循环指定的元素更小的元素. 这样就能保证每次内循环结束后都能保证循环期间遇到的最小值到达合适的位置.</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> selectionSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = array.length</span><br><span class=\"line\">    <span class=\"keyword\">let</span> outerIndex, innerIndex, indexMin</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len - <span class=\"number\">1</span>; outerIndex++) &#123;</span><br><span class=\"line\">        indexMin = outerIndex</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (innerIndex = outerIndex + <span class=\"number\">1</span>; innerIndex &lt; len; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[indexMin] &gt; array[innerIndex]) &#123;</span><br><span class=\"line\">                indexMin = innerIndex</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outerIndex !== indexMin) &#123;</span><br><span class=\"line\">            swap(array, indexMin, outerIndex)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>选择排序执行的步骤为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 0, 10, 9, 2, 1 ]</span><br><span class=\"line\">[ 0, 1, 10, 9, 2 ]</span><br><span class=\"line\">[ 0, 1, 2, 10, 9 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>上边的例子就很典型啦<a href=\"https://github.com/luoquanquan/learn-fe/commit/f10b339d9f9ae082adc4bdf96ab20c132a586e4f\" target=\"_blank\" rel=\"noopener\">代码地址</a></p>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"冒泡排序","url":"/Blog/dataStructures-algorithms/NOTE/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","content":"<blockquote>\n<p>冒泡排序算法是最慢的排序算法之一, 也是最容易实现的排序算法</p>\n</blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>冒泡排序之所以叫冒泡排序是因为使用这种排序算法排序时, 数据会像气泡一样从数组的一端飘到另一端. 假设正在将一组数字按照升序排列, 较大的值会浮动到数组的右侧, 而较小的值则会浮动到数组的左侧.</p>\n<a id=\"more\"></a>\n\n<p>示例, 给定原待排数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomArr = [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始的冒泡排序\"><a href=\"#初始的冒泡排序\" class=\"headerlink\" title=\"初始的冒泡排序\"></a>初始的冒泡排序</h2><p>冒泡排序比较任何两个相邻的项, 如果第一个比第二个大, 则交换他们. 元素项向上移动到正确的顺序,就好像气泡升至表面一样, 冒泡排序因此得名.</p>\n<p>根据上述的概念, 推断冒泡排序的代码实现为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bubbleSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> innerIndex = <span class=\"number\">0</span>; innerIndex &lt; len - <span class=\"number\">1</span>; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[innerIndex] &lt; array[innerIndex + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换两项的数据</span></span><br><span class=\"line\">                swap(array, innerIndex, innerIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过冒泡排序执行的过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>详细的对比过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 10</span><br><span class=\"line\">10 0</span><br><span class=\"line\">10 2</span><br><span class=\"line\">10 1</span><br><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">9 0</span><br><span class=\"line\">9 2</span><br><span class=\"line\">9 1</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">0 2</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 9</span><br><span class=\"line\">9 10</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>最终执行的结果为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>本步骤中的代码在<a href=\"https://github.com/luoquanquan/learn-fe/commit/c315a8ff1b50d1f7a1a56f78963c75d810c5ab71\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"改进的冒泡排序\"><a href=\"#改进的冒泡排序\" class=\"headerlink\" title=\"改进的冒泡排序\"></a>改进的冒泡排序</h2><blockquote>\n<p>在初始的冒泡排序中 9 和 10 两个数字已经比较过, 但是后续的每轮循环都在再重新<a href=\"https://github.com/luoquanquan/learn-fe/commit/67a9d05171a5bd58c43f324e80437cde50409001\" target=\"_blank\" rel=\"noopener\">比较一次</a>. 然而这是没必要的…</p>\n</blockquote>\n<p>如果内循环的时候减去外循环已经跑过的轮数(也就是已经确定了位置的数据的个数), 就能避免内循环里的没有必要的比较了~</p>\n<p>改进后的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> modifiedBubbleSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> outerIndex = <span class=\"number\">0</span>; outerIndex &lt; len; outerIndex++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> innerIndex = <span class=\"number\">0</span>; innerIndex &lt; len - <span class=\"number\">1</span> - outerIndex; innerIndex++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(array[innerIndex], array[innerIndex + <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[innerIndex] &gt; array[innerIndex + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 交换两项的数据</span></span><br><span class=\"line\">                swap(array, innerIndex, innerIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(array)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改进后的执行过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>详细的对比过程为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">9 10</span><br><span class=\"line\">10 0</span><br><span class=\"line\">10 2</span><br><span class=\"line\">10 1</span><br><span class=\"line\">[ 9, 0, 2, 1, 10 ]</span><br><span class=\"line\">9 0</span><br><span class=\"line\">9 2</span><br><span class=\"line\">9 1</span><br><span class=\"line\">[ 0, 2, 1, 9, 10 ]</span><br><span class=\"line\">0 2</span><br><span class=\"line\">2 1</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">0 1</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br><span class=\"line\">[ 0, 1, 2, 9, 10 ]</span><br></pre></td></tr></table></figure>\n\n<p>可以发现, 对比的次数随着外层循环的执行而递减.</p>\n<h2 id=\"对比两种冒泡排序\"><a href=\"#对比两种冒泡排序\" class=\"headerlink\" title=\"对比两种冒泡排序\"></a>对比两种冒泡排序</h2><p>删除除计时以外的 console 启用创建随机数组方法创建一个大数组, 用两种冒泡排序分别处理大数组得到的结果为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bubbleSort: 379.321ms</span><br><span class=\"line\">modifiedBubbleSort: 238.535ms</span><br></pre></td></tr></table></figure>\n\n<p>综上可知, 改进后的冒泡排序性能提升比较明显, <a href=\"https://github.com/luoquanquan/learn-fe/commit/8f5c38cfd997afcf84e2cf4343d629a5c8d2d638\" target=\"_blank\" rel=\"noopener\">对比代码</a></p>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"美化 next 主题","url":"/Blog/hexo-usage/%E7%BE%8E%E5%8C%96-next-%E4%B8%BB%E9%A2%98/","content":"<h2 id=\"自己-fork-一份-next-项目-作为博客项目的-sub-moudle\"><a href=\"#自己-fork-一份-next-项目-作为博客项目的-sub-moudle\" class=\"headerlink\" title=\"自己 fork 一份 next 项目, 作为博客项目的 sub-moudle\"></a>自己 fork 一份 next 项目, 作为博客项目的 sub-moudle</h2><h3 id=\"初始化步骤\"><a href=\"#初始化步骤\" class=\"headerlink\" title=\"初始化步骤\"></a>初始化步骤</h3><ul>\n<li>fork 官方的 <code>https://github.com/theme-next/hexo-theme-next</code> 并更名为 <code>quanquan-hexo-theme-next</code></li>\n<li>清空 <code>themes</code> 目录下的所有主题文件</li>\n<li>执行 <code>git submodule add https://github.com/luoquanquan/quanquan-hexo-theme-next.git themes/next</code> 将 <code>fork</code> 来的 next 主题项目作为 <code>submodule</code> 添加到博客项目下</li>\n<li>此时执行 <code>hexo s</code> 就可以看到 next 主题的页面啦</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"将主题项目作为子模块的目的\"><a href=\"#将主题项目作为子模块的目的\" class=\"headerlink\" title=\"将主题项目作为子模块的目的\"></a>将主题项目作为子模块的目的</h3><p>直接 clone 三方的主题, 可以默认直接用, 但是如果想要基于其进行配置就 gg 了, 之前文章中提到过原生的 next 并不是很好看. 我们要修改主题的配置, 注定要修改主题项目的代码, 但是对于三方的主题项目肯定没有提交的权限, 所以只能 fork 一份自己维护. 可以保存自己的配置实现跨多端的文档编写.</p>\n<h3 id=\"其他终端导入相同配置的主题文件\"><a href=\"#其他终端导入相同配置的主题文件\" class=\"headerlink\" title=\"其他终端导入相同配置的主题文件\"></a>其他终端导入相同配置的主题文件</h3><p>使用 git clone 是不会克隆 submodule 的, 克隆主的博客项目后还需要执行</p>\n<ul>\n<li>git submodule init 初始化本地配置文件</li>\n<li>git submodule update 从该项目中抓取所有数据并检出父项目中列出的合适的提交</li>\n</ul>\n<p>也可在 clone 使用 git clone –recursive 命令, git 就会自动初始化并更新仓库中的每一个子模块</p>\n<h3 id=\"获取主题项目的更新\"><a href=\"#获取主题项目的更新\" class=\"headerlink\" title=\"获取主题项目的更新\"></a>获取主题项目的更新</h3><p>若子分支仓库中有未同步的更新, 可通过 <code>git submodule update --remote --rebase</code> 来同步最新的内容. 之后便可以打开编辑器在子模块上工作修改代码了.</p>\n<p>主题作者发布了新的主题功能或者修复了 bug, 我们想同步到自己的自定义主题当中. 因为我们的自定义主题是从原主题中 fork 出来的, 可以通过 <code>git remote add source https://github.com/theme-next/hexo-theme-next</code> 命令将源主题仓库添加为子模块的 一个新的 source 仓库. 然后运行 <code>git fetch</code> 拉取修改后, 便可以通过 <code>git merge origin/master</code> 来同步源主题的更新了</p>\n<h2 id=\"自定义-next-主题配置\"><a href=\"#自定义-next-主题配置\" class=\"headerlink\" title=\"自定义 next 主题配置\"></a>自定义 next 主题配置</h2><p>一个 hexo 博客项目中存在两个 <code>_config.yml</code> 配置文件, 项目更目录的 <code>_config.yml</code> 文件称为 <strong>站点配置文件</strong>, 主题根目录下的 <code>_config.yml</code> 文件称为 <strong>主题配置文件</strong></p>\n<h3 id=\"菜单设置\"><a href=\"#菜单设置\" class=\"headerlink\" title=\"菜单设置\"></a>菜单设置</h3><blockquote>\n<p>菜单包括: home tags categories archives about schedule sitemap commonweal</p>\n</blockquote>\n<p>默认 next 开启的菜单只有 home 和 archives 两个, 若要打开更多的菜单, 打开 <strong>主题配置文件</strong> 找到 <code># Menu Settings</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">home</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">archive</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">user</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<p>按照如上的方式修改即可.</p>\n<p>解释<code>home: / || home</code> 其中 <code>||</code>左边的 <code>/</code> 表示的是当前 menu 对应的路径, 右边的 home 表示的是 icon, 这个的制作和修改参考<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">fontawesome</a></p>\n<h3 id=\"next-主题的样式设置\"><a href=\"#next-主题的样式设置\" class=\"headerlink\" title=\"next 主题的样式设置\"></a>next 主题的样式设置</h3><p>next 主题提供了四种样式, 总体来说大同小异, 修改的方式是在 <strong>主题配置文件</strong> 中找到<code># Scheme Settings</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Muse</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"comment\"># scheme: Pisces</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Gemini</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"侧边栏调整\"><a href=\"#侧边栏调整\" class=\"headerlink\" title=\"侧边栏调整\"></a>侧边栏调整</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span></span><br><span class=\"line\">  <span class=\"attr\">position:</span> <span class=\"string\">left</span>        <span class=\"string\">//靠左放置</span></span><br><span class=\"line\">  <span class=\"comment\">#position: right      //靠右放置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span></span><br><span class=\"line\">  <span class=\"comment\">#display: post        //默认行为，在文章页面（拥有目录列表）时显示</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span> <span class=\"string\">always</span>       <span class=\"string\">//在所有页面中都显示</span></span><br><span class=\"line\">  <span class=\"comment\">#display: hide        //在所有页面中都隐藏（可以手动展开）</span></span><br><span class=\"line\">  <span class=\"comment\">#display: remove      //完全移除</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">offset:</span> <span class=\"number\">12</span>            <span class=\"string\">//文章间距（只对Pisces</span> <span class=\"string\">|</span> <span class=\"string\">Gemini两种风格有效）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">b2t:</span> <span class=\"literal\">false</span>            <span class=\"string\">//返回顶部按钮（只对Pisces</span> <span class=\"string\">|</span> <span class=\"string\">Gemini两种风格有效）</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">scrollpercent:</span> <span class=\"literal\">true</span>   <span class=\"string\">//返回顶部按钮的百分比</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置博客头像\"><a href=\"#设置博客头像\" class=\"headerlink\" title=\"设置博客头像\"></a>设置博客头像</h3><p>在 <strong>主题配置文件</strong> 中找到 <code># Sidebar Avatar</code> 字段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"comment\"># Replace the default image and set the url here.</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/images/avatar.jpeg</span></span><br></pre></td></tr></table></figure>\n\n<p>url 对应的就是头像的路径, 只要把图片放到主题项目下的 <code>source/images</code> 目录下, hexo 就能默认就能找到</p>\n<h3 id=\"添加分类模块\"><a href=\"#添加分类模块\" class=\"headerlink\" title=\"添加分类模块\"></a>添加分类模块</h3><ul>\n<li>新建一个页面 <code>hexo new page categories</code>, 会在 <code>source</code> 目录下创建 <code>categorcies/index.md</code> 该文件内标注了文件 <code>title</code> 为 <code>categorcies</code>, 将其修改为 <code>分类</code></li>\n<li>打开 <strong>主题配置文件</strong> 找到 <code>menu</code> 删除 <code>categories: /categories/ || th</code> 前的注释</li>\n<li>在文章顶部的文章头信息区域添加 <code>categories</code> 并设置为要将文章设置的分类名, <code>hexo</code> 就会自动把文章划分到指定的分类中</li>\n</ul>\n<h3 id=\"添加标签模块\"><a href=\"#添加标签模块\" class=\"headerlink\" title=\"添加标签模块\"></a>添加标签模块</h3><ul>\n<li>新建一个页面 <code>hexo new page tags</code>, 会在 <code>source</code> 目录下创建 <code>tags/index.md</code> 该文件内标注了文件 <code>title</code> 为 <code>tags</code>, 将其修改为 <code>标签</code></li>\n<li>打开 <strong>主题配置文件</strong> 找到 <code>menu</code> 删除 <code>tags: /tags/ || tags</code> 前的注释</li>\n<li>在文章顶部的文章头信息区域添加 <code>tags</code> 并设置为要将文章设置的分类名, <code>hexo</code> 就会自动把文章划分到指定的分类中</li>\n</ul>\n<p>eg:</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 美化 next 主题</span><br><span class=\"line\">date: 2020-02-06 21:50:31</span><br><span class=\"line\">categories:</span><br><span class=\"line\"><span class=\"bullet\">  - </span>Blog</span><br><span class=\"line\">tags:</span><br><span class=\"line\"><span class=\"bullet\">  - </span>hexo</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 自己 fork 一份 next 项目, 作为博客项目的 sub-moudle</span></span><br></pre></td></tr></table></figure>\n\n<p><code>hexo</code> 会自动创建 <code>Blog</code> 分类和 <code>hexo</code> 标签, 并为当前的文章添加两个属性</p>\n<h3 id=\"添加关于模块\"><a href=\"#添加关于模块\" class=\"headerlink\" title=\"添加关于模块\"></a>添加关于模块</h3><ul>\n<li>新建一个页面 <code>hexo new page about</code>, 会在 <code>source</code> 目录下创建 <code>about/index.md</code> 该文件就是你写简历的地方啦~</li>\n<li>打开 <strong>主题配置文件</strong> 找到 <code>menu</code> 删除 <code>about: /about/ || user</code> 前的注释</li>\n</ul>\n<h3 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h3><ul>\n<li>安装 <a href=\"https://www.npmjs.com/package/hexo-generator-searchdb\" target=\"_blank\" rel=\"noopener\">hexo-generator-searchdb</a> 插件 <code>npm i hexo-generator-searchdb</code></li>\n<li>在 <strong>站点配置文件</strong> 的最下方添加<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure></li>\n<li>在 <strong>主题配置文件</strong> 中找到 <code>Local search</code>, 将 <code>enable</code> 设置为 <code>true</code></li>\n</ul>\n<h3 id=\"设置网站的-favicon\"><a href=\"#设置网站的-favicon\" class=\"headerlink\" title=\"设置网站的 favicon\"></a>设置网站的 favicon</h3><p>把想要设置为 <code>favicon</code> 的图片放到 <code>themes/next/source/images</code>, 然后在 <strong>主题配置文件</strong> 中找到 <code>favicon</code> 一口气全给他改了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/favicon.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/favicon.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/favicon.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br><span class=\"line\">  <span class=\"comment\">#android_manifest: /images/manifest.json</span></span><br><span class=\"line\">  <span class=\"comment\">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>\n<p>其中, <code>/images/favicon.png</code> 就是你要设置为 <code>favicon</code> 的图片.</p>\n<h3 id=\"自定义文字大小-amp-颜色\"><a href=\"#自定义文字大小-amp-颜色\" class=\"headerlink\" title=\"自定义文字大小 &amp; 颜色\"></a>自定义文字大小 &amp; 颜色</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;font</span> <span class=\"string\">color=\"red\"&gt;红色的文字&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&lt;font</span> <span class=\"string\">size=60&gt;大文字比你大&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&lt;font</span> <span class=\"string\">size=5</span> <span class=\"string\">color=\"#FF0000\"&gt;小文字比你小,</span> <span class=\"string\">但是比你有营养&lt;/font&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&lt;center&gt;我可以居中&lt;/center&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">红色的文字</font></p>\n<p><font size=60>大文字比你大</font></p>\n<p><font size=5 color=\"#FF0000\">小文字比你小, 但是比你有营养</font></p>\n<center>我可以居中</center>\n\n<h3 id=\"修改超链接文本样式\"><a href=\"#修改超链接文本样式\" class=\"headerlink\" title=\"修改超链接文本样式\"></a>修改超链接文本样式</h3><p>在 <code>themes/next/source/css/_common/components/post/post.styl</code> 样式文件末尾添加:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;:hover &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在右上角或者左上角实现fork-me-on-github\"><a href=\"#在右上角或者左上角实现fork-me-on-github\" class=\"headerlink\" title=\"在右上角或者左上角实现fork me on github\"></a>在右上角或者左上角实现fork me on github</h3><ul>\n<li>首先到<a href=\"http://tholman.com/github-corners/\" target=\"_blank\" rel=\"noopener\">这里</a>或者<a href=\"https://github.blog/2008-12-19-github-ribbons/\" target=\"_blank\" rel=\"noopener\">这里</a> 挑选自己喜欢的 fork me 样式, 并复制相关的代码</li>\n<li>然后粘贴刚才复制的代码到 <code>themes/next/layout/_layout.swig</code>文件中 (放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面), 并把 href 改为你的 github 地址</li>\n</ul>\n<p>eg:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"headband\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/luoquanquan\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"github-corner\"</span> <span class=\"attr\">aria-label</span>=<span class=\"string\">\"View source on GitHub\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 250 250\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"currentColor\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"transform-origin: 130px 106px;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"octo-arm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"currentColor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"octo-body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"><span class=\"selector-class\">.github-corner</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.octo-arm</span>&#123;<span class=\"attribute\">animation</span>:octocat-wave <span class=\"number\">560ms</span> ease-in-out&#125;<span class=\"keyword\">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(<span class=\"number\">0</span>)&#125;20%,60%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(-<span class=\"number\">25deg</span>)&#125;40%,80%&#123;<span class=\"attribute\">transform</span>:<span class=\"built_in\">rotate</span>(<span class=\"number\">10deg</span>)&#125;&#125;<span class=\"keyword\">@media</span> (<span class=\"attribute\">max-width:</span><span class=\"number\">500px</span>)&#123;<span class=\"selector-class\">.github-corner</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.octo-arm</span>&#123;<span class=\"attribute\">animation</span>:none&#125;<span class=\"selector-class\">.github-corner</span> <span class=\"selector-class\">.octo-arm</span>&#123;<span class=\"attribute\">animation</span>:octocat-wave <span class=\"number\">560ms</span> ease-in-out&#125;&#125;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">\"http://schema.org/WPHeader\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-inner\"</span>&gt;</span>&#123;% include '_partials/header/index.swig' %&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-RSS\"><a href=\"#添加-RSS\" class=\"headerlink\" title=\"添加 RSS\"></a>添加 RSS</h3><h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li>执行 <code>npm i hexo-generator-feed</code></li>\n<li>打开 <strong>站点配置文件</strong> 并在文件 <code>Extensions</code> 下方添加如下代码<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># RSS</span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"attr\">hub:</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit_delim:</span> <span class=\"string\">' '</span></span><br></pre></td></tr></table></figure></li>\n<li>打开 <strong>主题配置文件</strong> 找到 <code># Sidebar Settings</code> 下的 <code># Social Links</code> 打开 <code>RSS: /atom.xml || rss</code> 前边的注释即可</li>\n<li>最后重新生成一次文章静态网站, 能发现新的网站中添加了 <code>atom.xml</code> 部署到网站到服务器</li>\n<li>通过浏览器访问博客网站, 社交链接的位置出现 <code>RSS</code> 说明配置成功<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-08-15-16-51.png\" alt=\"2020-02-08-15-16-51\"></li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>打开一个 <code>rss reader</code> 的网站, 比如 <a href=\"https://feedreader.com/\" target=\"_blank\" rel=\"noopener\">这个</a></li>\n<li>注册一个账户, 进入网站</li>\n<li>点击 <code>Add a new feed</code> 按钮<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-08-15-13-13.png\" alt=\"2020-02-08-15-13-13\"></li>\n<li>点击配置步骤中\b加入的 <code>RSS</code> 按钮, 浏览器会跳转到一个 xml 文档的地址, 此时复制浏览器 url, 并粘贴到 <code>Address</code> 的输入框中<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-08-15-18-43.png\" alt=\"2020-02-08-15-18-43\"></li>\n<li>待阅读器识别到你的博客 title 的时候点击 <code>Add the feed</code> 即可</li>\n<li>enjoy</li>\n</ul>\n<h3 id=\"添加动态背景\"><a href=\"#添加动态背景\" class=\"headerlink\" title=\"添加动态背景\"></a>添加动态背景</h3><ul>\n<li>打开 <strong>主题配置文件</strong> 找到 <code># Canvas-nest</code> 并修改, <code>canvas_nest</code> 的 <code>enable</code> 属性为 <code>true</code></li>\n<li>找到 <code>canvas_nest</code> 和 <code>canvas_nest_nomobile</code> 两个字段, 打开两个字段前的注释, 也可以像我一样, 把两个 js 文件 copy 到项目目录下以提升稳定性</li>\n<li>重新打包 &amp; 部署</li>\n<li>enjoy</li>\n</ul>\n<h3 id=\"博文压缩\"><a href=\"#博文压缩\" class=\"headerlink\" title=\"博文压缩\"></a>博文压缩</h3><ul>\n<li>安装 gulp<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install gulp -g</span><br><span class=\"line\">npm install gulp-minify-css gulp-uglify-es gulp-htmlmin gulp-htmlclean gulp -D</span><br></pre></td></tr></table></figure></li>\n<li>创建 <code>gulpfile.js</code> 内容参考<a href=\"https://github.com/luoquanquan/handle-note/blob/master/gulpfile.js\" target=\"_blank\" rel=\"noopener\">这里</a></li>\n<li>修改 <code>npm script</code> 为 <code>&quot;build&quot;: &quot;hexo g &amp;&amp; gulp&quot;</code> 每次编译完成后都执行下 gulp 用于压缩文件</li>\n<li>enjoy</li>\n</ul>\n<h3 id=\"在网站底部加上访问量\"><a href=\"#在网站底部加上访问量\" class=\"headerlink\" title=\"在网站底部加上访问量\"></a>在网站底部加上访问量</h3><p>在 <strong>项目配置文件</strong> 中找到 <code>busuanzi_count</code> 将 enable 属性设置为 true 即可</p>\n<h3 id=\"添加博文字数统计\"><a href=\"#添加博文字数统计\" class=\"headerlink\" title=\"添加博文字数统计\"></a>添加博文字数统计</h3><ul>\n<li>执行 <code>npm i hexo-symbols-count-time</code> 安装插件</li>\n<li>字数统计能力自动就激活了</li>\n<li>enjoy</li>\n</ul>\n<h3 id=\"修改文章访问路径\"><a href=\"#修改文章访问路径\" class=\"headerlink\" title=\"修改文章访问路径\"></a>修改文章访问路径</h3><p>默认的文章访问路径中包含了写作日期, 很不好. 打开 <strong>站点配置文件</strong> 修改 <code>permalink</code> 字段</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:category/:title/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐藏网页底部powered-By-Hexo-强力驱动\"><a href=\"#隐藏网页底部powered-By-Hexo-强力驱动\" class=\"headerlink\" title=\"隐藏网页底部powered By Hexo / 强力驱动\"></a>隐藏网页底部powered By Hexo / 强力驱动</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">powered:</span></span><br><span class=\"line\">  <span class=\"comment\"># Hexo link (Powered by Hexo).</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/f054333ac9e6\" target=\"_blank\" rel=\"noopener\">hexo的next主题个性化教程:打造炫酷网站</a></li>\n<li><a href=\"https://www.jianshu.com/p/3a05351a37dc\" target=\"_blank\" rel=\"noopener\">Hexo的Next主题详细配置</a></li>\n<li><a href=\"https://juejin.im/post/5c2e22fcf265da615d72c596\" target=\"_blank\" rel=\"noopener\">在 hexo 中使用 git submodules 管理主题</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">Git 工具 - 子模块</a></li>\n</ul>\n","categories":["Blog"],"tags":["hexo"]},{"title":"数据结构与算法概述","url":"/Blog/dataStructures-algorithms/%E9%83%9D%E6%96%8C%E7%89%88%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/","content":"<h2 id=\"数据结构与算法概述\"><a href=\"#数据结构与算法概述\" class=\"headerlink\" title=\"数据结构与算法概述\"></a>数据结构与算法概述</h2><blockquote>\n<p><a href=\"https://www.bilibili.com/video/av6159200\" target=\"_blank\" rel=\"noopener\">【郝斌】-数据结构入门</a>学习笔记</p>\n</blockquote>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>我们如何把现实中大量而复杂的问题以特定的数据类型和特定的存储结构保存到主存储器(内存)中, 以及在此基础上为实现某个功能 (比如查找某个元素删除某个元素, 对所有元素进行排序) 而执行的响应操作, 这个相应的操作页脚算法</p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th>数据结构</th>\n<th>算法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储个体 &amp; 个体的关系</td>\n<td>对存储数据的操作</td>\n</tr>\n<tr>\n<td>存储</td>\n<td>操作</td>\n</tr>\n</tbody></table>\n<h3 id=\"算法-—-解题的方法和步骤\"><a href=\"#算法-—-解题的方法和步骤\" class=\"headerlink\" title=\"算法 — 解题的方法和步骤\"></a>算法 — 解题的方法和步骤</h3><p>衡量算法的标准:</p>\n<ul>\n<li>时间复杂度 — 大概率执行的次数, 而非执行的时间</li>\n<li>空间复杂度 — 算法执行过程中大概占用的最大内存</li>\n<li>难易程度</li>\n<li>健壮性</li>\n</ul>\n<h3 id=\"数据结构的地位\"><a href=\"#数据结构的地位\" class=\"headerlink\" title=\"数据结构的地位\"></a>数据结构的地位</h3><p>数据结构是软件中最核心的课程</p>\n<p>程序 = 数据的存储 + 数据的操作 + 可以被计算机执行的语言</p>\n<h3 id=\"预备知识\"><a href=\"#预备知识\" class=\"headerlink\" title=\"预备知识\"></a>预备知识</h3><ul>\n<li>指针<ul>\n<li>指针的重要性: 指针是 C 语言的灵魂</li>\n<li>定义:<ul>\n<li>地址总线, 指定内存单元的编号, 电脑装系统. 如果你的系统是 32 位, 那就只能读取到 4G 的内存. 范围: 0 - FFFFFFFF(0 - 4G - 1)</li>\n<li>控制总线, 控制读 or 写</li>\n<li>数据总线, 数据传输</li>\n<li>指针就是地址, 地址就是指针. 指针变量是存放内存单元地址的变量, 指针的本质是一个操作受限的非负整数</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n<li>结构体</li>\n<li>动态内存的分配和释放</li>\n</ul>\n<p>目前进度 第五课</p>\n<h2 id=\"添加书单\"><a href=\"#添加书单\" class=\"headerlink\" title=\"添加书单\"></a>添加书单</h2><p><a href=\"https://item.jd.com/12407475.html\" target=\"_blank\" rel=\"noopener\">数据结构（C语言版）清华大学计算机系列教材</a><br><a href=\"https://book.douban.com/subject/6424904/\" target=\"_blank\" rel=\"noopener\">大话数据结构</a></p>\n","categories":["Blog"],"tags":["数据结构与算法"]},{"title":"简单写作 & 站点配置","url":"/Blog/hexo-usage/%E7%AE%80%E5%8D%95%E5%86%99%E4%BD%9C-%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE/","content":"<h2 id=\"简单写作\"><a href=\"#简单写作\" class=\"headerlink\" title=\"简单写作\"></a>简单写作</h2><h3 id=\"创建一篇文章\"><a href=\"#创建一篇文章\" class=\"headerlink\" title=\"创建一篇文章\"></a>创建一篇文章</h3><p>项目 <code>scaffolds</code> 目录下存放了 <code>draft page post</code> 三种格式文章的模板, 可以通过调用 <code>hexo new {模板名} {文章 title}</code> 的形式创建一篇文章 or 草稿, 例如:</p>\n<ul>\n<li><code>hexo new draft hello-world</code> 会在 <code>source/_drafts</code> 目录下创建 <code>hello-world.md</code> 文件</li>\n<li><code>hexo new page hello-world</code> 会在 <code>source/</code> 目录下创建 <code>hello-world</code> 目录, 并包含 <code>index.md</code> 文件</li>\n<li><code>hexo new hello-world</code> 会在 <code>source/_posts</code> 目录下创建 <code>hello-world.md</code> 文件</li>\n</ul>\n<p>PS: 创建草稿文件在执行编译时不会打包到静态站点目录下</p>\n<a id=\"more\"></a>\n\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><p>写作的过程中, 为了提升成就感. 总是不停的想要查看当前写作的进展, 此时可以通过以下命令启动一个本地服务实时刷新, 正在编写的文档. 爽的一批~</p>\n<ul>\n<li>npm run server</li>\n<li>hexo server</li>\n<li>hexo s</li>\n</ul>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><p>在<a href=\"https://note.niubishanshan.top/2020/02/06/hexo-usage/hexo-github-pages-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/\">前一篇文章</a>中我们已经提到过, 我们写的 <code>.md</code> 文件最终是要被 <code>hexo</code> 编码成静态站点的. 编码的命令为:</p>\n<ul>\n<li>npm run build</li>\n<li>hexo generate</li>\n<li>hexo g</li>\n</ul>\n<h3 id=\"清除已经生成的文件\"><a href=\"#清除已经生成的文件\" class=\"headerlink\" title=\"清除已经生成的文件\"></a>清除已经生成的文件</h3><p><code>hexo clean</code></p>\n<h3 id=\"列出当前博客的信息\"><a href=\"#列出当前博客的信息\" class=\"headerlink\" title=\"列出当前博客的信息\"></a>列出当前博客的信息</h3><p><code>hexo list</code></p>\n<p>ps: 以上内容参考自 <a href=\"https://hexo.io/docs/commands\" target=\"_blank\" rel=\"noopener\">hexo 官网</a>, 这些命令也可以通过 <code>hexo --help</code> 获取到.</p>\n<h2 id=\"站点配置\"><a href=\"#站点配置\" class=\"headerlink\" title=\"站点配置\"></a>站点配置</h2><h3 id=\"站点基础信息\"><a href=\"#站点基础信息\" class=\"headerlink\" title=\"站点基础信息\"></a>站点基础信息</h3><p>打开项目根目录下的 <code>_config.yml</code> 文件, 找到 <code># Site</code> 并修改为以下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">圈圈的随手笔记</span>                          <span class=\"comment\"># 博客名字</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">路漫漫其修远兮,</span> <span class=\"string\">吾将上下而求索</span>         <span class=\"comment\"># 你的格言</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">技术学习,</span> <span class=\"string\">读书笔记,</span> <span class=\"string\">生活感悟~</span>      <span class=\"comment\"># 博客描述</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"string\">前端,</span> <span class=\"string\">JavaScript,</span> <span class=\"string\">Node,</span> <span class=\"string\">全栈,</span> <span class=\"string\">读书</span>  <span class=\"comment\"># 博客关键字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">圈圈的圈</span>                             <span class=\"comment\"># 你的名字</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span>                             <span class=\"comment\"># 博客语言 - 这个是中文</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">''</span>                                <span class=\"comment\"># 时区, 默认是当地时区</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-next-主题\"><a href=\"#安装-next-主题\" class=\"headerlink\" title=\"安装 next 主题\"></a>安装 next 主题</h2><p>项目目录下的 themes 目录下存放的就是博客的主题文件, 默认是 <code>landscape</code> 主题看上去也挺简洁但是我不喜欢, 那就改呗~</p>\n<ul>\n<li>首先, 在项目目录下执行 <code>git clone https://github.com/theme-next/hexo-theme-next.git themes/next</code> 克隆 next 主题到 themes 目录下</li>\n<li>其次, 修改 <code>_config.yml</code> 文件</li>\n<li>最后, 执行 <code>hexo s</code> 启动文章预览服务</li>\n</ul>\n<p>访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">localhost:4000</a><br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-03-05-15.png\" alt=\"2020-02-06-03-05-15\"></p>\n<p>虽然是能用了, 但是也没有很好看呀… 😂</p>\n","categories":["Blog"],"tags":["hexo"]},{"title":"hexo & github pages 搭建免费博客","url":"/Blog/hexo-usage/hexo-github-pages-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/","content":"<blockquote>\n<p>Blog 系列文章不会对外发布, 多数情况是分享给以后的自己, 所以默认读者为高级前端工程师啦~</p>\n</blockquote>\n<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>本文即将创建的博客系统基于 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a>, 博客托管平台为 <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>, 基于 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">github pages</a> 实现 hexo 生成的静态文件的托管能力, 默认读者已经对以上三者有一定的了解…</p>\n<a id=\"more\"></a>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>首先, 到 github 创建一个空的仓库命名为 <code>handle-note</code></li>\n</ul>\n<p><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-00-10-23.png\" alt=\"2020-02-06-00-10-23\"></p>\n<ul>\n<li>其次, 安装 hexo-cli <code>npm install hexo-cli -g</code></li>\n<li>最后, 在你喜欢的目录下执行 <code>hexo init handle-note</code> 名字只是为了和 github 项目名字一样, 完成博客项目的初始化</li>\n</ul>\n<h2 id=\"关联本地项目和远程项目\"><a href=\"#关联本地项目和远程项目\" class=\"headerlink\" title=\"关联本地项目和远程项目\"></a>关联本地项目和远程项目</h2><p>hexo 项目初始化完成后, 进入项目目录并执行以下命令, 完成初始化项目的 git 处理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git commit -m <span class=\"string\">\"hexo init\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意, 实际使用的时候这里的 luoquanquan 要变成你自己的用户名</span></span><br><span class=\"line\">git remote add origin git@github.com:luoquanquan/handle-note.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>到了这一步, 就完成了初始化项目的构建</p>\n<h2 id=\"修改配置文件生成目录为-docs\"><a href=\"#修改配置文件生成目录为-docs\" class=\"headerlink\" title=\"修改配置文件生成目录为 docs\"></a>修改配置文件生成目录为 docs</h2><p>打开项目目录下的 <code>_config.yml</code> 文件, 找到 <code># Directory</code> 下的 <code>public_dir: public</code> 字段, 把 <code>public</code> 改为 <code>docs</code></p>\n<h2 id=\"生成-blog-项目-并-push-代码\"><a href=\"#生成-blog-项目-并-push-代码\" class=\"headerlink\" title=\"生成 blog 项目, 并 push 代码\"></a>生成 blog 项目, 并 push 代码</h2><ul>\n<li>执行 <code>hexo g</code> 生成静态博客网站</li>\n<li>将生成的 <code>docs</code> 目录的所有内容推送到远程</li>\n</ul>\n<h2 id=\"启动-github-pages\"><a href=\"#启动-github-pages\" class=\"headerlink\" title=\"启动 github pages\"></a>启动 github pages</h2><ul>\n<li>点击项目设置<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-01-24-33.png\" alt=\"2020-02-06-01-24-33\"></li>\n<li>在项目设置中的 github pages 栏目 Source 选项卡选择 master branch /docs folder<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-01-25-54.png\" alt=\"2020-02-06-01-25-54\"></li>\n<li>访问  <code>luoquanquan.github.io/handle-note/</code> 查看效果发现样式乱掉了<br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-01-29-02.png\" alt=\"2020-02-06-01-29-02\"></li>\n</ul>\n<h2 id=\"修改-blog-站点路径\"><a href=\"#修改-blog-站点路径\" class=\"headerlink\" title=\"修改 blog 站点路径\"></a>修改 blog 站点路径</h2><p>打开 <code>_config.yml</code> 文件, 找到 <code># URL</code> 下的 <code>root: /</code> -&gt; <code>root: /handle-note/</code><br>再次, 打包 -&gt; push</p>\n<p>然后访问 <code>luoquanquan.github.io/handle-note/</code><br><img src=\"http://handle-note-img.niubishanshan.top/2020-02-06-01-41-31.png\" alt=\"2020-02-06-01-41-31\"></p>\n<p>配置完成, 由于 docs 项目在主体项目中, 方便的实现了博客项目的版本管理能力</p>\n","categories":["Blog"],"tags":["hexo","github pages"]},{"title":"隐藏滚动条","url":"/%E5%89%8D%E7%AB%AF/CSS/%E9%9A%90%E8%97%8F%E6%BB%9A%E5%8A%A8%E6%9D%A1/","content":"<p>使用纯 CSS 实现隐藏滚动条, 内容比较少直接放代码链接了:</p>\n<p><a href=\"https://github.com/luoquanquan/learn-fe/blob/master/hidden-scroll-bar/readMe.md\" target=\"_blank\" rel=\"noopener\">Reference</a></p>\n","categories":["前端"],"tags":["CSS"]},{"title":"chrome 禁止网页自动跳转 https.md","url":"/Tips/tips/chrome%20%E7%A6%81%E6%AD%A2%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%20https/","content":"<ul>\n<li>在地址栏输入 <a href=\"chrome://net-internals/#hsts\">chrome://net-internals/#hsts</a> 并回车</li>\n<li>在打开的页面中 <code>Delete domain security policies</code> 栏目下的输入框输入你要禁止跳转 https 的域名</li>\n<li>点击 <code>Delete</code></li>\n<li>然后在 <code>Query HSTS/PKP domain</code> 栏目下的输入框在次输入你刚刚输入的域名</li>\n<li>点击 <code>Query</code></li>\n<li>如果返回的是 <code>Not found</code> 说明禁用成功, 你可以用 <code>http</code> 方式访问网站了</li>\n</ul>\n","categories":["Tips"],"tags":["浏览器"]},{"title":"历史版本浏览器下载","url":"/Tips/tips/%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8B%E8%BD%BD/","content":"<h2 id=\"历史版本浏览器-用于-debug\"><a href=\"#历史版本浏览器-用于-debug\" class=\"headerlink\" title=\"历史版本浏览器, 用于 debug\"></a>历史版本浏览器, 用于 debug</h2><ul>\n<li><a href=\"https://www.chromedownloads.net/\" target=\"_blank\" rel=\"noopener\">Chrome</a></li>\n<li><a href=\"http://ftp.mozilla.org/pub/firefox/releases/\" target=\"_blank\" rel=\"noopener\">Fire Fox</a></li>\n</ul>\n","categories":["Tips"],"tags":["浏览器"]},{"title":"9 种方式实现数组去重","url":"/JavaScript/dataStructures-algorithms/NOTE/9%20%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/","content":"<blockquote>\n<p>业务需求跟的太久了, 回首技术真的落后好多. 即将而立之年, 重拾基础. 不知该感到荣幸还是有点酸楚</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"方法一-两层循环-通过标记判断是否更新结果数组\"><a href=\"#方法一-两层循环-通过标记判断是否更新结果数组\" class=\"headerlink\" title=\"方法一, 两层循环, 通过标记判断是否更新结果数组\"></a>方法一, 两层循环, 通过标记判断是否更新结果数组</h2><ul>\n<li>定义 ret = [] 用于存放结果数组</li>\n<li>定义 repeat 变量作为当前元素是否存在的标记值, 并默认赋值为 false</li>\n<li>外层循环, 遍历原数组中的每一个元素, 遍历前先把 repeat 置为 false 假设当前元素没有未在结果数组中出现</li>\n<li>内层循环, 遍历当前的结果数组. 如果当前的结果数组中已经包含了外层循环中遍历的元素, 标记 repeat 为 ture</li>\n<li>判断 repeat 的值, 如果当前元素没有存在于结果数组中, 则向结果数组中添加当前值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/57d583c49d8d6119976659fe3bf9f456a899a706\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>通过 github 上的评论可以看到当前提交的代码有 bug, 修改的代码为<a href=\"https://github.com/luoquanquan/learn-fe/commit/8a0fc3ae271c2f703d21f2ac281d961dfbeea1c7\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法二-先给数组排序-在逐个比较\"><a href=\"#方法二-先给数组排序-在逐个比较\" class=\"headerlink\" title=\"方法二, 先给数组排序, 在逐个比较\"></a>方法二, 先给数组排序, 在逐个比较</h2><ul>\n<li>定义 ret = [] 用于存放结果数组</li>\n<li>备份原数组并对备份的数组进行排序</li>\n<li>启动循环, 一次对比当前元素和结果数组中的最后一个元素, 相等则跳过, 不相等加入结果数组</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/c69aabd43dc0dc0166f1d7cbbaba17579acb89b2\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法三-利用对象的属性不能重复的特性\"><a href=\"#方法三-利用对象的属性不能重复的特性\" class=\"headerlink\" title=\"方法三, 利用对象的属性不能重复的特性\"></a>方法三, 利用对象的属性不能重复的特性</h2><ul>\n<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>\n<li>创建结果数组</li>\n<li>遍历原数组, 把各个值当做对象的 key 存入对象, 如果对象的 key 出现重复值后边的会直接覆盖掉前边的</li>\n<li>遍历对象, 并把所有的 key 作为元素 push 到结果数组中</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/1f04c7391ca27c7c1ac6d9a0f09551cf19925614\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法四-还是利用对象的属性不能重复的特性\"><a href=\"#方法四-还是利用对象的属性不能重复的特性\" class=\"headerlink\" title=\"方法四, 还是利用对象的属性不能重复的特性\"></a>方法四, 还是利用对象的属性不能重复的特性</h2><ul>\n<li>创建一个空对象用于存放不重复值, 这里可以优化成 <code>Object.create(null)</code></li>\n<li>创建结果数组</li>\n<li>遍历原数组, 判断对象是否已经存在当前 item 为 key 的成员, 如果有说明之前的遍历中出现过该值-跳过, 如果没有对象中添加对应的属性同时给结果数组中添加相应的值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/0f50bab95474fadf6d828c90f70c7bc0fa5f5764\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法五-找到一个元素看他的后边还有没有和他一样的元素\"><a href=\"#方法五-找到一个元素看他的后边还有没有和他一样的元素\" class=\"headerlink\" title=\"方法五, 找到一个元素看他的后边还有没有和他一样的元素\"></a>方法五, 找到一个元素看他的后边还有没有和他一样的元素</h2><ul>\n<li>备份原数组, 并作为结果数组</li>\n<li>遍历备份的数组</li>\n<li>取出当前的元素</li>\n<li>遍历当前元素到数组的结尾, 如果有和当前元素相等的元素则 splice 掉</li>\n<li>len– 因为删除了一个元素故数组的长度减一</li>\n<li>j– 因为和当前元素相等的后位元素已经被删除, 之后的元素迁移, 所以需要 j– 修正内部遍历的索引值</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/43539818cea6c0e91bd6ed2b340dab491f8be2d0\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归\"><a href=\"#方法六-同方法二-先给数组排序-在逐个比较-此处利用了递归\" class=\"headerlink\" title=\"方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归\"></a>方法六, 同方法二, 先给数组排序, 在逐个比较, 此处利用了递归</h2><p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/3378001ce9424d10a0cb4df318b4d723f0502080\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法七-遍历数组-看前方有没有和当前值相等的值\"><a href=\"#方法七-遍历数组-看前方有没有和当前值相等的值\" class=\"headerlink\" title=\"方法七, 遍历数组, 看前方有没有和当前值相等的值\"></a>方法七, 遍历数组, 看前方有没有和当前值相等的值</h2><ul>\n<li>定义 ret = [] 用于存放结果数组</li>\n<li>遍历原数组, 取出当前项, 如果当前项的前方存在相等的项跳过, 否则说明这是当前项最后一次在数组中出现将其加入到结果数组</li>\n<li>遍历完成后返回结果数组, 即为不包含重复项的数组</li>\n</ul>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/8e9f384f9adf391ad8afc71c46096dd80d8df335\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法八-使用-reduce-原理同方法一\"><a href=\"#方法八-使用-reduce-原理同方法一\" class=\"headerlink\" title=\"方法八, 使用 reduce 原理同方法一\"></a>方法八, 使用 reduce 原理同方法一</h2><p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/4b314b641eeaa0da4ae0ccf6ba1bbfff96bf4852\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<h2 id=\"方法九-利用-Set-值不能重复的特性实现数组的去重\"><a href=\"#方法九-利用-Set-值不能重复的特性实现数组的去重\" class=\"headerlink\" title=\"方法九, 利用 Set 值不能重复的特性实现数组的去重\"></a>方法九, 利用 Set 值不能重复的特性实现数组的去重</h2><p>过于简单, 不再赘述</p>\n<p>本方法代码<a href=\"https://github.com/luoquanquan/learn-fe/commit/29526d14c6e7a27315b6d4bdb1cc457f9144cf2c\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n","categories":["JavaScript"],"tags":["数据结构与算法"]},{"title":"parseInt vs Math.floor","url":"/JavaScript/basic-js/parseInt-vs-Math-floor/","content":"<blockquote>\n<p>parseInt 和 Math.floor 都可以实现取整, 但是处理的方式存在差别</p>\n</blockquote>\n<h2 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt\"></a>parseInt</h2><p>parseInt(string, radix) 将一个字符串 string 转换为 radix 进制的整数, radix 为介于 2 - 36 之间的整数, 如果 radix 传入的是 0, 会以默认值 10 处理.</p>\n<p>其中</p>\n<p>string: 是要被解析的字符串, 如果传入的值不是一个字符串则会将其转化成字符串(toString 方法), 字符串开头结尾的空白字符会被忽略</p>\n<p>radix: 一个介于 2 - 36 的整数, 表示的是上述字符串的基数. 默认值是 10, 如果传入的 radix 小于 2 或者大于 36 则返回 NaN</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>可以处理数字(调用数字的 toString 方法将其转化成字符串)<ul>\n<li>parseInt(1.1) -&gt; 1</li>\n<li>parseInt(1.9) -&gt; 1</li>\n<li>parseInt(0.9) -&gt; 0</li>\n<li>parseInt(-1.9) -&gt; -1</li>\n</ul>\n</li>\n<li>可以处理 <font color=\"red\">数字开头的字符串</font><ul>\n<li>parseInt(‘-1’) -&gt; -1</li>\n<li>parseInt(‘10px’) -&gt; 10</li>\n<li>…</li>\n</ul>\n</li>\n<li>可以把 2 - 36 进制的数转为 10 进制<ul>\n<li>parseInt(11, 2) -&gt; 3</li>\n<li>parseInt(11, 8) -&gt; 9</li>\n<li>parseInt(11, 10) -&gt; 11</li>\n<li>parseInt(11, 16) -&gt; 17</li>\n<li>parseInt(11, 36) -&gt; 37</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Math-floor\"><a href=\"#Math-floor\" class=\"headerlink\" title=\"Math.floor\"></a>Math.floor</h2><p>Math.floor(x) ===  向下取整, 返回小于或者等于给定数字的最大整数</p>\n<p>其中 x 是需要解析的数字</p>\n<ul>\n<li>Math.floor(1.2) -&gt; 1</li>\n<li>Math.floor(1.9) -&gt; 1</li>\n<li><font color=\"red\">Math.floor(-1.2) -&gt; -2</font> 真正的向下取整</li>\n<li>Math.floor(‘1.9’) -&gt; 1 也可以处理字符串(不建议用)</li>\n</ul>\n<h2 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat\"></a>parseFloat</h2><p>parseFloat(x) 函数可解析一个字符串, 并返回一个浮点数</p>\n<p>其中 x 是需要解析的字符串</p>\n<p>parseFloat 将它的字符串参数解析成为浮点数并返回. 如果在解析过程中遇到了正负号 (+ 或 -) 数字 (0-9) 小数点, 或者科学记数法中的指数 (e 或 E) 以外的字符, 则它会忽略该字符以及之后的所有字符, 返回当前已经解析到的浮点数. 同时参数字符串首位的空白符会被忽略</p>\n<p>PS: 如果字符串的第一个字符不能被转换为数字, 那么 parseFloat() 会返回 NaN.</p>\n","categories":["JavaScript"],"tags":["Math","Number"]},{"title":"生成随机数","url":"/JavaScript/dataStructures-algorithms/NOTE/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><ul>\n<li><p><code>Math.ceil(n)</code> 向上取整, 返回大于等于 n 的整数</p>\n</li>\n<li><p><code>Math.floor(n)</code> 向下取整, 返回 n 的整数部分</p>\n</li>\n<li><p><code>parseInt(n)</code> 向下取整, 返回 n 的整数部分</p>\n</li>\n<li><p><code>Math.round(n)</code> 四舍五入取整, 返回 n 四舍五入后的整数</p>\n</li>\n<li><p><code>Math.random(n)</code> 生成 [0, 1) 的随机数</p>\n</li>\n<li><p><code>Math.ceil(Math.random()*10)</code> 均衡获取 [1, 10] 之间的随机整数</p>\n<details>\n  <summary>代码示例详情</summary>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomNum = <span class=\"built_in\">Math</span>.ceil(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[randomNum]) &#123;</span><br><span class=\"line\">    ret[randomNum]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[randomNum] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ret)</span><br></pre></td></tr></table></figure>\n<p>  上述代码运行的结果如下:</p>\n<p>  node 中:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬───────────┐</span><br><span class=\"line\">│ (index) │  Values   │</span><br><span class=\"line\">├─────────┼───────────┤</span><br><span class=\"line\">│    1    │ 100004455 │</span><br><span class=\"line\">│    2    │ 99992092  │</span><br><span class=\"line\">│    3    │ 99995733  │</span><br><span class=\"line\">│    4    │ 99989966  │</span><br><span class=\"line\">│    5    │ 100006012 │</span><br><span class=\"line\">│    6    │ 100004826 │</span><br><span class=\"line\">│    7    │ 99999108  │</span><br><span class=\"line\">│    8    │ 99994649  │</span><br><span class=\"line\">│    9    │ 100004694 │</span><br><span class=\"line\">│   10    │ 100008465 │</span><br><span class=\"line\">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>\n\n<p>  浏览器中:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1: 100002116</span><br><span class=\"line\">2: 99998960</span><br><span class=\"line\">3: 100010656</span><br><span class=\"line\">4: 99996773</span><br><span class=\"line\">5: 100005989</span><br><span class=\"line\">6: 99999774</span><br><span class=\"line\">7: 99997476</span><br><span class=\"line\">8: 100003979</span><br><span class=\"line\">9: 99989204</span><br><span class=\"line\">10: 99995073</span><br></pre></td></tr></table></figure>\n</details>\n</li>\n<li><p><code>Math.floor(Math.random()*10)</code> 均衡获取 [0, 9] 的随机整数</p>\n<details>\n  <summary>代码示例详情</summary>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> randomNum = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[randomNum]) &#123;</span><br><span class=\"line\">    ret[randomNum]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[randomNum] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.table(ret)</span><br></pre></td></tr></table></figure>\n<p>  上述代码运行的结果如下:</p>\n<p>  node 中:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬───────────┐</span><br><span class=\"line\">│ (index) │  Values   │</span><br><span class=\"line\">├─────────┼───────────┤</span><br><span class=\"line\">│    0    │ 100015160 │</span><br><span class=\"line\">│    1    │ 100006201 │</span><br><span class=\"line\">│    2    │ 99989259  │</span><br><span class=\"line\">│    3    │ 99988278  │</span><br><span class=\"line\">│    4    │ 100005566 │</span><br><span class=\"line\">│    5    │ 100001095 │</span><br><span class=\"line\">│    6    │ 100003096 │</span><br><span class=\"line\">│    7    │ 99981274  │</span><br><span class=\"line\">│    8    │ 100007022 │</span><br><span class=\"line\">│    9    │ 100003049 │</span><br><span class=\"line\">└─────────┴───────────┘</span><br></pre></td></tr></table></figure>\n\n<p>  浏览器中:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0: 100006310</span><br><span class=\"line\">1: 100000609</span><br><span class=\"line\">2: 100001411</span><br><span class=\"line\">3: 99998525</span><br><span class=\"line\">4: 99991009</span><br><span class=\"line\">5: 100001548</span><br><span class=\"line\">6: 100004093</span><br><span class=\"line\">7: 99989084</span><br><span class=\"line\">8: 100013441</span><br><span class=\"line\">9: 99993970</span><br></pre></td></tr></table></figure>\n</details></li>\n<li><p><code>Math.round(Math.random())</code> 均衡比例获取 0 或者 1</p>\n</li>\n<li><p><code>Math.round(Math.random()*10)</code> 获取 [0, 10]的随机整数, 其中获取 0 和 10的几率为获取其他值的一半.</p>\n<details>\n  <summary>详细原因, 概率一目了然</summary><br>\n\n<table>\n<thead>\n<tr>\n<th>随机值范围</th>\n<th>得到的值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[0, 0.5)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>[0.5, 1.5)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1.5, 2.5)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>[2.5, 3.5)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>[3.5, 4.5)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>[4.5, 5.5)</td>\n<td>5</td>\n</tr>\n<tr>\n<td>[5.5, 6.5)</td>\n<td>6</td>\n</tr>\n<tr>\n<td>[6.5, 7.5)</td>\n<td>7</td>\n</tr>\n<tr>\n<td>[7.5, 8.5)</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[8.5, 9.5)</td>\n<td>9</td>\n</tr>\n<tr>\n<td>[9.5, 10)</td>\n<td>10</td>\n</tr>\n<tr>\n<td></details></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"生成一个-min-max-的随机整数\"><a href=\"#生成一个-min-max-的随机整数\" class=\"headerlink\" title=\"生成一个 [min, max] 的随机整数\"></a>生成一个 [min, max] 的随机整数</h2><ul>\n<li>生成随机数坑定要用到 <code>Math.random() -&gt; [0, 1)</code></li>\n<li>可以把一个数变成整数的方法有: <code>parseInt() Math.floor() Math.round() Math.ceil()</code></li>\n<li>这里选择功能强劲(<a href=\"https://luoquanquan.github.io/note/2020/02/04/basic-js/parseInt-vs-Math-floor\" target=\"_blank\" rel=\"noopener\">为什么这么说呢</a>)的 parseInt 直接截取数字的整数部分向下取整</li>\n<li>那么不难得到 <code>parseInt(Math.random() * 10) -&gt; [0, 9]</code></li>\n<li>所以, 如果我们想要得到一个 [0, max] 的随机数只需要 <code>parseInt(Math.random() * (max + 1))</code></li>\n<li>想要得到一个 [1, max] 的随机数只需要 <code>parseInt(Math.random() * (max - 1 + 1)) + 1</code></li>\n<li>进而可得出, 想要得到一个 [min, max] 的随机数. 把括号里的 -1 和括号外的 +1 等量代换成 min <code>parseInt(Math.random() * (max - min + 1)) + min</code></li>\n</ul>\n<p>最终可以得出, 生成一个 [min, max] 的随机整数的代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min = <span class=\"number\">0</span>, max = min</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max === min) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * (min + <span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>) + min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成一个-min-max-的长度为-len-的随机整数数组\"><a href=\"#生成一个-min-max-的长度为-len-的随机整数数组\" class=\"headerlink\" title=\"生成一个 [min, max] 的长度为 len 的随机整数数组\"></a>生成一个 [min, max] 的长度为 len 的随机整数数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min = <span class=\"number\">0</span>, max = min</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max === min) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * (min + <span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>) + min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> randomArr = <span class=\"function\">(<span class=\"params\">len, min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    ret[i] = randomNum(min, max)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成两个数之间的随机数-范围数字\"><a href=\"#生成两个数之间的随机数-范围数字\" class=\"headerlink\" title=\"生成两个数之间的随机数(范围数字)\"></a>生成两个数之间的随机数(范围数字)</h2><h3 id=\"四种情况\"><a href=\"#四种情况\" class=\"headerlink\" title=\"四种情况\"></a>四种情况</h3><h4 id=\"min-max\"><a href=\"#min-max\" class=\"headerlink\" title=\"[min, max]\"></a>[min, max]</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">  <span class=\"comment\">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.round(random * range)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬────────┐</span><br><span class=\"line\">│ (index) │ Values │</span><br><span class=\"line\">├─────────┼────────┤</span><br><span class=\"line\">│    0    │  487   │</span><br><span class=\"line\">│    1    │  989   │</span><br><span class=\"line\">│    2    │  1007  │</span><br><span class=\"line\">│    3    │  1009  │</span><br><span class=\"line\">│    4    │  1029  │</span><br><span class=\"line\">│    5    │  967   │</span><br><span class=\"line\">│    6    │  994   │</span><br><span class=\"line\">│    7    │  1004  │</span><br><span class=\"line\">│    8    │  980   │</span><br><span class=\"line\">│    9    │  1044  │</span><br><span class=\"line\">│   10    │  490   │</span><br><span class=\"line\">└─────────┴────────┘</span><br></pre></td></tr></table></figure></p>\n<p>  通过扩大 min max 的范围并掐头去尾, 解决最大最小值概率为一半的问题<br>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'min 不能小于 1'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  min = min - <span class=\"number\">1</span></span><br><span class=\"line\">  max = max + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> num = min + <span class=\"built_in\">Math</span>.round(random * range)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([min, max].includes(num)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> randomNum(min + <span class=\"number\">1</span>, max - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  修改后运行结果:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    1    │ 998826  │ &#39;9.99%&#39;  │</span><br><span class=\"line\">│    2    │ 1000556 │ &#39;10.01%&#39; │</span><br><span class=\"line\">│    3    │ 999015  │ &#39;9.99%&#39;  │</span><br><span class=\"line\">│    4    │ 997972  │ &#39;9.98%&#39;  │</span><br><span class=\"line\">│    5    │ 1000372 │ &#39;10.00%&#39; │</span><br><span class=\"line\">│    6    │ 1000381 │ &#39;10.00%&#39; │</span><br><span class=\"line\">│    7    │ 1000665 │ &#39;10.01%&#39; │</span><br><span class=\"line\">│    8    │ 1001230 │ &#39;10.01%&#39; │</span><br><span class=\"line\">│    9    │ 1001341 │ &#39;10.01%&#39; │</span><br><span class=\"line\">│   10    │ 999642  │ &#39;10.00%&#39; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-1\"><a href=\"#min-max-1\" class=\"headerlink\" title=\"[min, max)\"></a>[min, max)</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">  <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(random * range)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    1    │ 1110540 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    2    │ 1109941 │ &#39;11.10%&#39; │</span><br><span class=\"line\">│    3    │ 1111700 │ &#39;11.12%&#39; │</span><br><span class=\"line\">│    4    │ 1110570 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    5    │ 1111081 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    6    │ 1112978 │ &#39;11.13%&#39; │</span><br><span class=\"line\">│    7    │ 1112090 │ &#39;11.12%&#39; │</span><br><span class=\"line\">│    8    │ 1111245 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    9    │ 1109855 │ &#39;11.10%&#39; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-2\"><a href=\"#min-max-2\" class=\"headerlink\" title=\"(min, max]\"></a>(min, max]</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 四舍五入存在最小值和最大值出现的概率是中间值一半的误差, 正好给他均匀过去了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.round(range * random) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = min + <span class=\"built_in\">Math</span>.round(random * range);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  运行结果:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    2    │ 1109886 │ &#39;11.10%&#39; │</span><br><span class=\"line\">│    3    │ 1110669 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    4    │ 1113279 │ &#39;11.13%&#39; │</span><br><span class=\"line\">│    5    │ 1111945 │ &#39;11.12%&#39; │</span><br><span class=\"line\">│    6    │ 1110154 │ &#39;11.10%&#39; │</span><br><span class=\"line\">│    7    │ 1111446 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    8    │ 1111335 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│    9    │ 1111244 │ &#39;11.11%&#39; │</span><br><span class=\"line\">│   10    │ 1110042 │ &#39;11.10%&#39; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"min-max-3\"><a href=\"#min-max-3\" class=\"headerlink\" title=\"(min, max)\"></a>(min, max)</h4>  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = min + <span class=\"built_in\">Math</span>.round(random * range);</span><br><span class=\"line\">  <span class=\"comment\">// 命中最大值和最小值时直接忽略</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ([min, max].includes(num)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> randomNum(min, max)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  执行结果:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌─────────┬─────────┬──────────┐</span><br><span class=\"line\">│ (index) │    0    │    1     │</span><br><span class=\"line\">├─────────┼─────────┼──────────┤</span><br><span class=\"line\">│    2    │ 1249708 │ &#39;12.50%&#39; │</span><br><span class=\"line\">│    3    │ 1248357 │ &#39;12.48%&#39; │</span><br><span class=\"line\">│    4    │ 1248988 │ &#39;12.49%&#39; │</span><br><span class=\"line\">│    5    │ 1251120 │ &#39;12.51%&#39; │</span><br><span class=\"line\">│    6    │ 1250390 │ &#39;12.50%&#39; │</span><br><span class=\"line\">│    7    │ 1252465 │ &#39;12.52%&#39; │</span><br><span class=\"line\">│    8    │ 1248322 │ &#39;12.48%&#39; │</span><br><span class=\"line\">│    9    │ 1250650 │ &#39;12.51%&#39; │</span><br><span class=\"line\">└─────────┴─────────┴──────────┘</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"PS-本系列代码的测试用例\"><a href=\"#PS-本系列代码的测试用例\" class=\"headerlink\" title=\"PS 本系列代码的测试用例\"></a>PS 本系列代码的测试用例</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> randomNum = <span class=\"function\">(<span class=\"params\">min, max</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = max - min</span><br><span class=\"line\">    <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    <span class=\"comment\">// 四舍五入, 存在最小值和最大值概率为一半的问题</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.floor(random * range)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">1e7</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = randomNum(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret[random]) &#123;</span><br><span class=\"line\">    ret[random]++</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret[random] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ret = ret.map(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> [i, <span class=\"string\">`<span class=\"subst\">$&#123;(i <span class=\"regexp\">/ 1e7 * 100).toFixed(2)&#125;%`])</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">console.table(ret)</span></span></span></span><br></pre></td></tr></table></figure>\n","categories":["JavaScript"],"tags":["Math","数据结构与算法","JavaScript","Random"]},{"title":"同时配置 gitlab 和 github","url":"/Tips/GitHub/tips/%E5%90%8C%E6%97%B6%E9%85%8D%E7%BD%AE%20gitlab%20%E5%92%8C%20github/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><blockquote>\n<p>日常工作中, 公司内部项目通常是 git 来管理. 自己做的开源项目 Or 学习第三方的大佬开源的项目往往在 github 或者 coding 之类的平台上也由 git 来管理. 那么问题来了…</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class=\"line\">正克隆到 'handle-note'...</span><br><span class=\"line\">ssh: Could not resolve hostname github.com2: nodename nor servname provided, or not known</span><br><span class=\"line\">fatal: 无法读取远程仓库。</span><br><span class=\"line\"></span><br><span class=\"line\">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>\n\n<p>当要 <code>clone</code> GitHub 上的项目时会发现没有权限了. 面对这种情况有三种方案</p>\n<h2 id=\"直接下载\"><a href=\"#直接下载\" class=\"headerlink\" title=\"直接下载\"></a>直接下载</h2><ul>\n<li>点击 Clone or download 的绿色按钮</li>\n<li>在弹出的下拉框中点击右下角 <code>Download Zip</code> 下载代码库的安装包</li>\n</ul>\n<p>使用此方案下载的代码包解压后不包含 <code>.git</code> 项目配置目录无法跟踪项目并提交</p>\n<h2 id=\"使用-https-方案\"><a href=\"#使用-https-方案\" class=\"headerlink\" title=\"使用 https 方案\"></a>使用 https 方案</h2><ul>\n<li>点击 Clone or download 的绿色按钮</li>\n<li>在弹出的下拉框中点击左上角 Use HTTPS 输入框中的链接变成了以 https 开头</li>\n<li>执行以下命令<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/luoquanquan/handle-note.git</span><br></pre></td></tr></table></figure></li>\n<li>展示的结果如下<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">正克隆到 'handle-note'...</span><br><span class=\"line\">remote: Enumerating objects: 220, done.</span><br><span class=\"line\">remote: Counting objects: 100% (220/220), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (154/154), done.</span><br><span class=\"line\">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class=\"line\">接收对象中: 100% (220/220), 593.36 KiB | 70.00 KiB/s, 完成.</span><br><span class=\"line\">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure></li>\n<li>完成</li>\n</ul>\n<p>使用以上方法克隆的项目可以正常跟踪和提交</p>\n<h2 id=\"创建配置文件支持-shh-方式\"><a href=\"#创建配置文件支持-shh-方式\" class=\"headerlink\" title=\"创建配置文件支持 shh 方式\"></a>创建配置文件支持 shh 方式</h2><ul>\n<li>打开命令行, 执行 <code>sh $ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code></li>\n<li><code>Enter file in which to save the key</code> 在这一步的时候切记创建一个新的 key 名字, 否则会覆盖掉当前正在用的秘钥文件; 示例: <code>/Users/quanquanluo/.ssh/id_github_rsa</code></li>\n<li>一路回车…</li>\n<li>完成后进入用户的秘钥目录 Mac: <code>~/.ssh</code> Windows: <code>C:/Users/quanquan/.ssh</code> 此时该目录下文件列表<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">id_github_rsa.pub id_rsa.pub id_github_rsa</span><br><span class=\"line\">id_rsa            known_hosts</span><br></pre></td></tr></table></figure>\n包含了公司 git 的配置文件和 github 项目的配置文件</li>\n<li>把生成文件 id_github_rsa.pub 中的内容粘贴到这里 <a href=\"https://github.com/settings/ssh/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh/new</a> 在登录的 github 的前提下</li>\n<li>最后, 在当前目录创建 config 文件, 并粘贴一下内容<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host 我的公司</span><br><span class=\"line\">    HostName baidu.gitlab.com</span><br><span class=\"line\">    IdentityFile \"~/.ssh/id_rsa\"</span><br><span class=\"line\">Host GitHub</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    IdentityFile \"~/.ssh/id_github_rsa\"</span><br></pre></td></tr></table></figure></li>\n<li>验证:<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:luoquanquan/handle-note.git</span><br><span class=\"line\">正克隆到 'handle-note'...</span><br><span class=\"line\">remote: Enumerating objects: 220, done.</span><br><span class=\"line\">remote: Counting objects: 100% (220/220), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (154/154), done.</span><br><span class=\"line\">remote: Total 220 (delta 40), reused 219 (delta 39), pack-reused 0</span><br><span class=\"line\">接收对象中: 100% (220/220), 593.36 KiB | 84.00 KiB/s, 完成.</span><br><span class=\"line\">处理 delta 中: 100% (40/40), 完成.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"https-和-ssh-的区别\"><a href=\"#https-和-ssh-的区别\" class=\"headerlink\" title=\"https 和 ssh 的区别\"></a>https 和 ssh 的区别</h2><h3 id=\"clone-项目\"><a href=\"#clone-项目\" class=\"headerlink\" title=\"clone 项目\"></a>clone 项目</h3><p>使用 ssh 方式 clone 项目, 你必须是该项目的拥有者或者管理者. 并且已经成功配置了 ssh key, 然而使用 http 方式 clone 项目没有这个限制, 你可以随意克隆 github 上的项目</p>\n<h3 id=\"push-项目\"><a href=\"#push-项目\" class=\"headerlink\" title=\"push 项目\"></a>push 项目</h3><p>使用 ssh 方式 push 代码时, 你不需要验证用户名和密码. 但是如果你再创建 <code>ssh key</code> 时设置了密码就需要验证配对密码了. 而对于使用 https 的用户每次 push 代码的时候需要验证用户名和密码(首次推送可以选择缓存)</p>\n","categories":["Tips","GitHub"],"tags":["Mac","Windows","git","GitHub"]},{"title":"查询指定端口号对应的任务","url":"/Tips/tips/Mac%20%E5%88%87%E6%8D%A2%20zsh%20%E5%92%8C%20bash/","content":"<h2 id=\"zsh-gt-bash\"><a href=\"#zsh-gt-bash\" class=\"headerlink\" title=\"zsh -&gt; bash\"></a>zsh -&gt; bash</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bash-gt-zsh\"><a href=\"#bash-gt-zsh\" class=\"headerlink\" title=\"bash -&gt; zsh\"></a>bash -&gt; zsh</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PS-两种操作之后都需要重启终端才能生效\"><a href=\"#PS-两种操作之后都需要重启终端才能生效\" class=\"headerlink\" title=\"PS: 两种操作之后都需要重启终端才能生效\"></a>PS: 两种操作之后都需要重启终端才能生效</h2>","categories":["Tips"],"tags":["Mac"]},{"title":"Redis 基础","url":"/%E5%90%8E%E7%AB%AF/redis/Redis%20%E5%9F%BA%E7%A1%80/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install redis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件路径\"><a href=\"#配置文件路径\" class=\"headerlink\" title=\"配置文件路径\"></a>配置文件路径</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 前台启动</span></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 后台启动</span></span><br><span class=\"line\">redis-server &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"客户端-cli\"><a href=\"#客户端-cli\" class=\"headerlink\" title=\"客户端 cli\"></a>客户端 cli</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redis-数据类型\"><a href=\"#redis-数据类型\" class=\"headerlink\" title=\"redis 数据类型\"></a>redis 数据类型</h2><ul>\n<li>string 字符串 <code>get set getrange incr decr expire</code></li>\n<li>hash 对象 <code>hset hget hdel hmget hgetall</code></li>\n<li>列表 数组 <code>lpush lpop lrange lrem lindex rpush rpop ...</code></li>\n<li>set 集合<ul>\n<li>无序集合 <code>sadd smembers srem sunion sinter sdiff</code></li>\n<li>有序集合 <code>zadd zrange withscores</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h3><ul>\n<li><p>查看 redis 中的所有 keys</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">keys *</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">del a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看记录值的类型</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">type a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>给某条记录设置有效时间</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">expire a 5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看某条记录的有效时间</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ttl a</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"字符串相关\"><a href=\"#字符串相关\" class=\"headerlink\" title=\"字符串相关\"></a>字符串相关</h3><ul>\n<li><p>设置一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set a 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">get a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让某条记录自增</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">incr a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让某条记录自减</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">decr a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取某条记录指定范围内的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set name quanquan</span><br><span class=\"line\">getrange name 0 1 # qu -&gt; 包前也包后</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"hash-相关\"><a href=\"#hash-相关\" class=\"headerlink\" title=\"hash 相关\"></a>hash 相关</h3><ul>\n<li><p>创建一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset user name quanquan</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取记录的属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hget user name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置记录的另一条属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset user sex male</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取记录的多条属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hmget user sex name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取记录的所有内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hgetall user</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除记录的某个属性字段</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hdel user name</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"列表相关\"><a href=\"#列表相关\" class=\"headerlink\" title=\"列表相关\"></a>列表相关</h3><ul>\n<li><p>创建一条记录(向左 push)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lpush arr 1 2 3 4 5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看记录范围内的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lrange arr 0 -1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一条记录(向右 push)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpush arr2 1 2 3 4 5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看记录范围内的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lrange arr2 0 -1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从数组头部删除一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lpop arr</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从数组尾部删除一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpop arr</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除指定的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lrem arr 3 3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 其中, arr 是指定要操作的数组</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 第一个 3 指的是数组遍历数组中的三个元素范围</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 第二个 3 指的是从数组中找到数字 3 并移除他</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取出数组中指定的项</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> index 是从 0 开始的</span></span><br><span class=\"line\">lindex arr 1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"集合相关\"><a href=\"#集合相关\" class=\"headerlink\" title=\"集合相关\"></a>集合相关</h3><h4 id=\"无序集合\"><a href=\"#无序集合\" class=\"headerlink\" title=\"无序集合\"></a>无序集合</h4><ul>\n<li><p>创建一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sadd myset 1 2 3 4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列出所有的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">smembers myset</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除集合中的某一项</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">srem myset 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取两个 set 的并集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sunion myset myset1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取两个 set 的交集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sinter myset myset1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取两个 set 的差集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sdiff myset myset1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h3><ul>\n<li><p>创建记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">zadd my 1 100</span><br><span class=\"line\">zadd my 2 200</span><br><span class=\"line\">zadd my 1 101</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看指定范围的记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">zrange my 0 -1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1) <span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2) <span class=\"string\">\"101\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3) <span class=\"string\">\"200\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["后端"],"tags":["数据库","Redis"]},{"title":"游标 & 索引 & 权限 & 备份","url":"/%E5%90%8E%E7%AB%AF/mongo/%E6%B8%B8%E6%A0%87%20&%20%E7%B4%A2%E5%BC%95%20&%20%E6%9D%83%E9%99%90%20&%20%E5%A4%87%E4%BB%BD/","content":"<h2 id=\"游标\"><a href=\"#游标\" class=\"headerlink\" title=\"游标\"></a>游标</h2><p>通过 var cursor = db.user.find() 返回的 cursor 其实是一个游标(迭代器), 可以通过不停的使用 cursor.next() 来获取得到的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cursor = db.user.find()</span><br><span class=\"line\"><span class=\"keyword\">while</span>(cursor.hasNext()) &#123;</span><br><span class=\"line\">    print(cursor.next())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过使用以上命令可以打印出 user 中的所有文档</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cursor = db.user.find()</span><br><span class=\"line\">cursor.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    printjson(item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>cursor 有 forEach 方法, 但是并不是一个数组</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(cursor)  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>创建索引</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.ensureIndex(&#123;name: 1&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中, name 为添加索引的字段名, 1 代表正序, -1 代表倒序</p>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><ul>\n<li>使用 admin 数据库 <code>use admin</code></li>\n<li>创建用户<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.createUser(&#123;</span><br><span class=\"line\">    user: 'quanquan',</span><br><span class=\"line\">    pwd: '123456',</span><br><span class=\"line\">    roles:[&#123;</span><br><span class=\"line\">        role: 'readWrite',</span><br><span class=\"line\">        db: 'users'</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>关闭 mongodb 以后以需要登录的方式启动<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --dbpath=/Users/quanquanluo/data/db --auth</span><br></pre></td></tr></table></figure></li>\n<li>登录<ul>\n<li>方案 1, 连接后登录<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先连接 mongo</span></span><br><span class=\"line\">mongo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换到 admin 数据库</span></span><br><span class=\"line\">use admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登录 mongo</span></span><br><span class=\"line\">db.auth('quanquan', '123456')</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ...登录完成</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方案 2, 连接时登录<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongo -u quanquan -p 123456 [localhost/admin]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 其中 localhost/admin 的意思是指定数据库, 是可以忽略的</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ...登录完成</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"备份和还原\"><a href=\"#备份和还原\" class=\"headerlink\" title=\"备份和还原\"></a>备份和还原</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> db        数据库名</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mongodump 集合</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> out       导出的文件</span></span><br><span class=\"line\">mongodump --db users --collection user --out ./bak</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongorestore ./bak</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或者</span></span><br><span class=\"line\">mongorestore --dir ./bak</span><br></pre></td></tr></table></figure>\n","categories":["后端"],"tags":["数据库","MongoDB"]},{"title":"数据库操作","url":"/%E5%90%8E%E7%AB%AF/mongo/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p>展示所有数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">use users</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前数据库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>创建集合(刚刚创建的空数据库不会在 show dbs 中展示出来, 需要添加集合)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.createCollection('user')</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展示集合</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">show collections</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除集合</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.drop()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除数据库(在需要删除的数据库执行以下命令)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.dropDatabase()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除集合</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.drop()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><ul>\n<li><p>在集合中新增一个文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行以上命令, 如果当前数据库中已经存在 user 集合则会在 user 集合中创建一条文档, 如果当前数据库中没有 user 集合便会创建 user 集合并向该集合中插入一条文档</p>\n</li>\n<li><p>指定 id 插入文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;_id: 1, name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行以上命令, 系统会根据你指定的 _id 字段作为文档的 _id 而不会自动生成 ObjectId</p>\n</li>\n<li><p>智能插入方法, 如果当前 _id 的文档存在则更新其记录, 如果不存在则添加一条记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.save(&#123;_id: 1, name: 'quanquandequan', age: '9'&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li><p>删除符合条件的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.remove(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>\n<p>运行以上命令默认会删除所有符合条件的文档</p>\n</li>\n<li><p>删除第一条符合条件的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.remove(&#123;name: 'quanquan'&#125;, &#123;justOne: true&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><ul>\n<li>查询到文档, 并修改他<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.update(&#123;_id: 1&#125;, &#123;sex: 'male'&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>运行以上命令会覆盖式的修改整个文档, 如果只需要修改某个属性, 需要使用 $set</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.update(&#123;_id: 1&#125;, &#123;$set: &#123;sex: 'male'&#125;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><ul>\n<li><p>查询整个集合中的所有文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find()</span><br></pre></td></tr></table></figure></li>\n<li><p>查询集合中符合条件的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find(&#123;name: 'quanquan'&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询数组属性存在某个值的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find(&#123;time: 1&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询数组属性存在多个值的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find(&#123;time: &#123;$all: [1, 3]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查询数组属性存在某些值的文档</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.find(&#123;time: &#123;$in: [1, 3]&#125;&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前集合中文档的条数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">db.user.count()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分页</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageSize = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currentPage = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">db.find().limit(pageSize).skip(pageSize * (currentPage - <span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>上述命令中 limit 为限制文档数, skip 为跳过文档数. 组合起来实现了分页的功能</p>\n</li>\n</ul>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>正如上述命令中的 $set 还有很多操作符如下,</p>\n<h3 id=\"修改相关\"><a href=\"#修改相关\" class=\"headerlink\" title=\"修改相关\"></a>修改相关</h3><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$set</td>\n<td>不覆盖的设置文档中的某条属性</td>\n</tr>\n<tr>\n<td>$unset</td>\n<td>移除掉文档中的某条属性</td>\n</tr>\n<tr>\n<td>$inc</td>\n<td>文档中某个属性的值自增</td>\n</tr>\n<tr>\n<td>$push</td>\n<td>当文档中某个属性是数组的是时候想属性中添加一个值</td>\n</tr>\n<tr>\n<td>$addToSet</td>\n<td>当文档中某个属性是数组的是时候想属性中添加一个值, 且具备了去重的能力, 如果已经存在相关的记录就不添加了</td>\n</tr>\n<tr>\n<td>$pop</td>\n<td>移除数组属性值中的最后一个值</td>\n</tr>\n<tr>\n<td>‘hobby.0’</td>\n<td>修改数组属性 hobby 的第 0 项的值</td>\n</tr>\n</tbody></table>\n<h3 id=\"查询相关\"><a href=\"#查询相关\" class=\"headerlink\" title=\"查询相关\"></a>查询相关</h3><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$in</td>\n<td>属性值在某个属性数组范围内的时候命中 eg: 找出工作 1 年 3 年 5 年的员工: {jobTime: {$in: [1, 3, 5]}}, 当属性是数组的时候, 只要数组总包含一个 in 操作符中的 item 就会被命中</td>\n</tr>\n<tr>\n<td>$nin = $not: {$in: []}</td>\n<td>$in 的取反操作, 属性值不再某个范围内的时候命中</td>\n</tr>\n<tr>\n<td>$ne = not equal</td>\n<td>不相等的时候</td>\n</tr>\n<tr>\n<td>$lt</td>\n<td>属性值小于某个值的时候命中</td>\n</tr>\n<tr>\n<td>$gt</td>\n<td>属性值大于某个值的时候命中</td>\n</tr>\n<tr>\n<td>$lte</td>\n<td>属性值小于等于某个值的时候命中</td>\n</tr>\n<tr>\n<td>$gte</td>\n<td>属性值大于等于某个值的时候命中</td>\n</tr>\n<tr>\n<td>$all</td>\n<td>数组属性中包含所有的选择条件中的值才能命中 eg: {$all: [1, 3]} 能命中 time: [1, 2, 3], 但是不能命中 time: [1, 2, 4]</td>\n</tr>\n</tbody></table>\n<h2 id=\"文档读百遍-其义自见\"><a href=\"#文档读百遍-其义自见\" class=\"headerlink\" title=\"文档读百遍, 其义自见\"></a>文档读百遍, 其义自见</h2><p><a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener\">mongoose</a></p>\n","categories":["后端"],"tags":["数据库","MongoDB"]},{"title":"查询指定端口号对应的任务","url":"/Tips/tips/%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BB%BB%E5%8A%A1/","content":"<h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 只能获取当前用户启动的命令</span></span><br><span class=\"line\">lsof -i:27017</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管理员权限启动任务需要使用命令\"><a href=\"#管理员权限启动任务需要使用命令\" class=\"headerlink\" title=\"管理员权限启动任务需要使用命令\"></a>管理员权限启动任务需要使用命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo lsof -i:27017</span><br></pre></td></tr></table></figure>\n","categories":["Tips"],"tags":["Mac"]},{"title":"mongo 的安装和启动和连接","url":"/%E5%90%8E%E7%AB%AF/mongo/%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%E5%92%8C%E9%93%BE%E6%8E%A5/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后 MongoDB 的默认配置文件 <code>/usr/local/etc/mongod.conf</code></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 系统日志</span></span><br><span class=\"line\"><span class=\"attr\">systemLog:</span></span><br><span class=\"line\">  <span class=\"attr\">destination:</span> <span class=\"string\">file</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">/usr/local/var/log/mongodb/mongo.log</span></span><br><span class=\"line\">  <span class=\"attr\">logAppend:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 数据库本地文件</span></span><br><span class=\"line\"><span class=\"attr\">storage:</span></span><br><span class=\"line\">  <span class=\"attr\">dbPath:</span> <span class=\"string\">/usr/local/var/mongodb</span></span><br><span class=\"line\"><span class=\"comment\"># 网络相关</span></span><br><span class=\"line\"><span class=\"attr\">net:</span></span><br><span class=\"line\">  <span class=\"attr\">bindIp:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><ul>\n<li><p>普通启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定配置文件的启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 默认的 dbpath 为 /data/db 我的电脑上没有这个路径还没有权限创建...</span></span><br><span class=\"line\">mongod --dbpath=/Users/quanquanluo/data/db</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>启动后 mongo 会在 dbpath 目录下创建一坨文件, 文件列表如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">WiredTiger</span><br><span class=\"line\">WiredTiger.lock</span><br><span class=\"line\">WiredTiger.turtle</span><br><span class=\"line\">WiredTiger.wt</span><br><span class=\"line\">WiredTigerLAS.wt</span><br><span class=\"line\">_mdb_catalog.wt</span><br><span class=\"line\">collection-0--2763005286789933401.wt</span><br><span class=\"line\">collection-2--2763005286789933401.wt</span><br><span class=\"line\">collection-4--2763005286789933401.wt</span><br><span class=\"line\">diagnostic.data</span><br><span class=\"line\">files</span><br><span class=\"line\">index-1--2763005286789933401.wt</span><br><span class=\"line\">index-3--2763005286789933401.wt</span><br><span class=\"line\">index-5--2763005286789933401.wt</span><br><span class=\"line\">index-6--2763005286789933401.wt</span><br><span class=\"line\">journal</span><br><span class=\"line\">mongod.lock</span><br><span class=\"line\">sizeStorer.wt</span><br><span class=\"line\">storage.bson</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><ul>\n<li><p>命令行连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可视化工具连接<br>Robo 3T <a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n</ul>\n<p>ps: 这个东西, 装最新的就完了~</p>\n<h2 id=\"对比-MySQL\"><a href=\"#对比-MySQL\" class=\"headerlink\" title=\"对比 MySQL\"></a>对比 MySQL</h2><table>\n<thead>\n<tr>\n<th>mongo</th>\n<th>MySQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>文档(document) <font color=\"red\">单个文档最大 16M</font></td>\n<td>记录(row)</td>\n</tr>\n<tr>\n<td>集合(collection)</td>\n<td>表(table)</td>\n</tr>\n<tr>\n<td>数据库(database) 32 位系统上一个数据库存储文件不能超过 2G</td>\n<td>数据库(database)</td>\n</tr>\n</tbody></table>\n","categories":["后端"],"tags":["数据库","MongoDB"]}]